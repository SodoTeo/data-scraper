{
    "https://gohugo.io/getting-started/": "HUGO News Docs Themes Showcase Community GitHub Search gohugoio Star About In this section Introduction Features Privacy Security License Installation In this section macOS Linux Windows BSD Getting started In this section Quick start Basic usage Directory structure Configuration Configure markup Glossary of terms External learning resources Quick reference In this section Emojis Functions Methods Page collections Content management In this section Organization Page bundles Content formats Front matter Build options Page resources Image processing Shortcodes Related content Sections Content types Archetypes Taxonomies Summaries Links and cross references URL management Menus Static files Table of contents Comments Multilingual Markdown attributes Syntax highlighting Diagrams Mathematics Templates In this section Introduction Template lookup order Base templates and blocks Single page templates List templates Homepage template Section templates Taxonomy templates Pagination Content view templates Partial templates Shortcode templates Menu templates Data templates RSS templates Sitemap templates Embedded templates Custom output formats 404 page Robots.txt Functions In this section cast collections compare crypto data debug diagrams encoding fmt global go template hugo images inflect js lang math openapi3 os partials path reflect resources safe strings templates time transform urls Methods In this section Duration Menu Menu entry Page Pages Resource Shortcode Site Taxonomy Time Render hooks In this section Introduction Code blocks Headings Images Links Hugo Modules In this section Configure Hugo modules Use Hugo Modules Theme components Hugo Pipes In this section Introduction Transpile Sass to CSS PostCSS PostProcess JavaScript building Babel Asset minification Concatenating assets Fingerprinting and SRI hashing Resource from string Resource from template CLI Troubleshooting In this section Audit Logging Inspection Deprecation Performance FAQs Developer tools In this section Editor plugins Front-ends Search Migrations Other projects Hosting and deployment In this section Hugo Deploy Deploy with Rclone Deploy with Rsync Host on 21YunBox Host on AWS Amplify Host on Azure Static Web Apps Host on Cloudflare Pages Host on Firebase Host on GitHub Pages Host on GitLab Pages Host on KeyCDN Host on Netlify Host on Render Contribute In this section Development Documentation Themes Maintenance Getting started If this is your first time using Hugo and you\u2019ve already installed Hugo on your machine , we recommend the quick start . You can also use external learning resources to learn Hugo. Quick start Learn to create a Hugo site in minutes. Read More \u00bb Basic usage Hugo\u2019s command line interface (CLI) is fully featured but simple to use, even for those with limited experience working from the command line. Read More \u00bb Directory structure Each Hugo project is a directory, with subdirectories that contribute to the content, structure, behavior, and presentation of your site. Read More \u00bb Configure Hugo How to configure your Hugo site. Read More \u00bb Configure markup Configure rendering of markup to HTML. Read More \u00bb Glossary of terms Terms commonly used throughout the documentation. Read More \u00bb External learning resources A list of tutorials and books on Hugo. Read More \u00bb By the Hugo Authors File an Issue Get Help @GoHugoIO @spf13 @bepsays Hugo Sponsors The Hugo logos are copyright \u00a9 Steve Francia 2013\u20132024. The Hugo Gopher is based on an original work by Ren\u00e9e French. News Docs Themes Showcase Community GitHub About Installation Getting started Quick reference Content management Templates Functions Methods Render hooks Hugo Modules Hugo Pipes CLI Troubleshooting Developer tools Hosting and deployment Contribute Maintenance Menu Docs Menu",
    "https://gohugo.io/installation/": "HUGO News Docs Themes Showcase Community GitHub Search gohugoio Star About In this section Introduction Features Privacy Security License Installation In this section macOS Linux Windows BSD Getting started In this section Quick start Basic usage Directory structure Configuration Configure markup Glossary of terms External learning resources Quick reference In this section Emojis Functions Methods Page collections Content management In this section Organization Page bundles Content formats Front matter Build options Page resources Image processing Shortcodes Related content Sections Content types Archetypes Taxonomies Summaries Links and cross references URL management Menus Static files Table of contents Comments Multilingual Markdown attributes Syntax highlighting Diagrams Mathematics Templates In this section Introduction Template lookup order Base templates and blocks Single page templates List templates Homepage template Section templates Taxonomy templates Pagination Content view templates Partial templates Shortcode templates Menu templates Data templates RSS templates Sitemap templates Embedded templates Custom output formats 404 page Robots.txt Functions In this section cast collections compare crypto data debug diagrams encoding fmt global go template hugo images inflect js lang math openapi3 os partials path reflect resources safe strings templates time transform urls Methods In this section Duration Menu Menu entry Page Pages Resource Shortcode Site Taxonomy Time Render hooks In this section Introduction Code blocks Headings Images Links Hugo Modules In this section Configure Hugo modules Use Hugo Modules Theme components Hugo Pipes In this section Introduction Transpile Sass to CSS PostCSS PostProcess JavaScript building Babel Asset minification Concatenating assets Fingerprinting and SRI hashing Resource from string Resource from template CLI Troubleshooting In this section Audit Logging Inspection Deprecation Performance FAQs Developer tools In this section Editor plugins Front-ends Search Migrations Other projects Hosting and deployment In this section Hugo Deploy Deploy with Rclone Deploy with Rsync Host on 21YunBox Host on AWS Amplify Host on Azure Static Web Apps Host on Cloudflare Pages Host on Firebase Host on GitHub Pages Host on GitLab Pages Host on KeyCDN Host on Netlify Host on Render Contribute In this section Development Documentation Themes Maintenance Installation Install Hugo on macOS, Linux, Windows, BSD, and on any machine that can run the Go compiler tool chain. macOS Install Hugo on macOS. Read More \u00bb Linux Install Hugo on Linux. Read More \u00bb Windows Install Hugo on Windows. Read More \u00bb BSD Install Hugo on BSD derivatives. Read More \u00bb By the Hugo Authors File an Issue Get Help @GoHugoIO @spf13 @bepsays Hugo Sponsors The Hugo logos are copyright \u00a9 Steve Francia 2013\u20132024. The Hugo Gopher is based on an original work by Ren\u00e9e French. News Docs Themes Showcase Community GitHub About Installation Getting started Quick reference Content management Templates Functions Methods Render hooks Hugo Modules Hugo Pipes CLI Troubleshooting Developer tools Hosting and deployment Contribute Maintenance Menu Docs Menu",
    "https://gohugo.io/installation/macos/": "HUGO News Docs Themes Showcase Community GitHub Search gohugoio Star About In this section Introduction Features Privacy Security License Installation In this section macOS Linux Windows BSD Getting started In this section Quick start Basic usage Directory structure Configuration Configure markup Glossary of terms External learning resources Quick reference In this section Emojis Functions Methods Page collections Content management In this section Organization Page bundles Content formats Front matter Build options Page resources Image processing Shortcodes Related content Sections Content types Archetypes Taxonomies Summaries Links and cross references URL management Menus Static files Table of contents Comments Multilingual Markdown attributes Syntax highlighting Diagrams Mathematics Templates In this section Introduction Template lookup order Base templates and blocks Single page templates List templates Homepage template Section templates Taxonomy templates Pagination Content view templates Partial templates Shortcode templates Menu templates Data templates RSS templates Sitemap templates Embedded templates Custom output formats 404 page Robots.txt Functions In this section cast collections compare crypto data debug diagrams encoding fmt global go template hugo images inflect js lang math openapi3 os partials path reflect resources safe strings templates time transform urls Methods In this section Duration Menu Menu entry Page Pages Resource Shortcode Site Taxonomy Time Render hooks In this section Introduction Code blocks Headings Images Links Hugo Modules In this section Configure Hugo modules Use Hugo Modules Theme components Hugo Pipes In this section Introduction Transpile Sass to CSS PostCSS PostProcess JavaScript building Babel Asset minification Concatenating assets Fingerprinting and SRI hashing Resource from string Resource from template CLI Troubleshooting In this section Audit Logging Inspection Deprecation Performance FAQs Developer tools In this section Editor plugins Front-ends Search Migrations Other projects Hosting and deployment In this section Hugo Deploy Deploy with Rclone Deploy with Rsync Host on 21YunBox Host on AWS Amplify Host on Azure Static Web Apps Host on Cloudflare Pages Host on Firebase Host on GitHub Pages Host on GitLab Pages Host on KeyCDN Host on Netlify Host on Render Contribute In this section Development Documentation Themes Maintenance INSTALLATION macOS Install Hugo on macOS. Editions Hugo is available in two editions: standard and extended. With the extended edition you can: Encode to the WebP format when processing images . You can decode WebP images with either edition. Transpile Sass to CSS using the embedded LibSass transpiler. The extended edition is not required to use the Dart Sass transpiler. We recommend that you install the extended edition. Prerequisites Although not required in all cases, Git , Go , and Dart Sass are commonly used when working with Hugo. Git is required to: Build Hugo from source Use the Hugo Modules feature Install a theme as a Git submodule Access commit information from a local Git repository Host your site with services such as CloudCannon , Cloudflare Pages , GitHub Pages , GitLab Pages , and Netlify Go is required to: Build Hugo from source Use the Hugo Modules feature Dart Sass is required to transpile Sass to CSS when using the latest features of the Sass language. Please refer to the relevant documentation for installation instructions: Git Go Dart Sass Prebuilt binaries Prebuilt binaries are available for a variety of operating systems and architectures. Visit the latest release page, and scroll down to the Assets section. Download the archive for the desired edition, operating system, and architecture Extract the archive Move the executable to the desired directory Add this directory to the PATH environment variable Verify that you have execute permission on the file Please consult your operating system documentation if you need help setting file permissions or modifying your PATH environment variable. If you do not see a prebuilt binary for the desired edition, operating system, and architecture, install Hugo using one of the methods described below. Package managers Homebrew Homebrew is a free and open-source package manager for macOS and Linux. To install the extended edition of Hugo: brew install hugo MacPorts MacPorts is a free and open-source package manager for macOS. To install the extended edition of Hugo: sudo port install hugo Build from source To build the extended edition of Hugo from source you must: Install Git Install Go version 1.20 or later Install a C compiler, either GCC or Clang Update your PATH environment variable as described in the Go documentation The install directory is controlled by the GOPATH and GOBIN environment variables. If GOBIN is set, binaries are installed to that directory. If GOPATH is set, binaries are installed to the bin subdirectory of the first directory in the GOPATH list. Otherwise, binaries are installed to the bin subdirectory of the default GOPATH ( $HOME/go or %USERPROFILE%\\go ). Then build and test: CGO_ENABLED = 1 go install -tags extended github.com/gohugoio/hugo@latest hugo version Comparison Prebuilt binaries Package managers Build from source Easy to install? \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f Easy to upgrade? \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f Easy to downgrade? \u2714\ufe0f \u2714\ufe0f 1 \u2714\ufe0f Automatic updates? \u274c \u274c 2 \u274c Latest version available? \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f Easy if a previous version is still installed. \u21a9\ufe0e Possible but requires advanced configuration. \u21a9\ufe0e See also Linux Windows BSD Development GitInfo On this page Editions Prerequisites Prebuilt binaries Package managers Build from source Comparison Last updated: January 26, 2024: Squashed 'docs/' changes from 4dd2d6415..3b1a8579d (7125ad401) Improve this page By the Hugo Authors File an Issue Get Help @GoHugoIO @spf13 @bepsays Hugo Sponsors The Hugo logos are copyright \u00a9 Steve Francia 2013\u20132024. The Hugo Gopher is based on an original work by Ren\u00e9e French. News Docs Themes Showcase Community GitHub About Installation Getting started Quick reference Content management Templates Functions Methods Render hooks Hugo Modules Hugo Pipes CLI Troubleshooting Developer tools Hosting and deployment Contribute Maintenance Menu Docs Menu",
    "https://gohugo.io/getting-started/quick-start/": "HUGO News Docs Themes Showcase Community GitHub Search gohugoio Star About In this section Introduction Features Privacy Security License Installation In this section macOS Linux Windows BSD Getting started In this section Quick start Basic usage Directory structure Configuration Configure markup Glossary of terms External learning resources Quick reference In this section Emojis Functions Methods Page collections Content management In this section Organization Page bundles Content formats Front matter Build options Page resources Image processing Shortcodes Related content Sections Content types Archetypes Taxonomies Summaries Links and cross references URL management Menus Static files Table of contents Comments Multilingual Markdown attributes Syntax highlighting Diagrams Mathematics Templates In this section Introduction Template lookup order Base templates and blocks Single page templates List templates Homepage template Section templates Taxonomy templates Pagination Content view templates Partial templates Shortcode templates Menu templates Data templates RSS templates Sitemap templates Embedded templates Custom output formats 404 page Robots.txt Functions In this section cast collections compare crypto data debug diagrams encoding fmt global go template hugo images inflect js lang math openapi3 os partials path reflect resources safe strings templates time transform urls Methods In this section Duration Menu Menu entry Page Pages Resource Shortcode Site Taxonomy Time Render hooks In this section Introduction Code blocks Headings Images Links Hugo Modules In this section Configure Hugo modules Use Hugo Modules Theme components Hugo Pipes In this section Introduction Transpile Sass to CSS PostCSS PostProcess JavaScript building Babel Asset minification Concatenating assets Fingerprinting and SRI hashing Resource from string Resource from template CLI Troubleshooting In this section Audit Logging Inspection Deprecation Performance FAQs Developer tools In this section Editor plugins Front-ends Search Migrations Other projects Hosting and deployment In this section Hugo Deploy Deploy with Rclone Deploy with Rsync Host on 21YunBox Host on AWS Amplify Host on Azure Static Web Apps Host on Cloudflare Pages Host on Firebase Host on GitHub Pages Host on GitLab Pages Host on KeyCDN Host on Netlify Host on Render Contribute In this section Development Documentation Themes Maintenance GETTING STARTED Quick start Learn to create a Hugo site in minutes. In this tutorial you will: Create a site Add content Configure the site Publish the site Prerequisites Before you begin this tutorial you must: Install Hugo (extended edition, v0.112.0 or later) Install Git You must also be comfortable working from the command line. Create a site Commands If you are a Windows user: Do not use the Command Prompt Do not use Windows PowerShell Run these commands from PowerShell or a Linux terminal such as WSL or Git Bash PowerShell and Windows PowerShell are different applications . Verify that you have installed Hugo v0.112.0 or later. hugo version Run these commands to create a Hugo site with the Ananke theme. The next section provides an explanation of each command. hugo new site quickstart cd quickstart git init git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke echo \"theme = 'ananke'\" >> hugo.toml hugo server View your site at the URL displayed in your terminal. Press Ctrl + C to stop Hugo\u2019s development server. Explanation of commands Create the directory structure for your project in the quickstart directory. hugo new site quickstart Change the current directory to the root of your project. cd quickstart Initialize an empty Git repository in the current directory. git init Clone the Ananke theme into the themes directory, adding it to your project as a Git submodule . git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke Append a line to the site configuration file, indicating the current theme. echo \"theme = 'ananke'\" >> hugo.toml Start Hugo\u2019s development server to view the site. hugo server Press Ctrl + C to stop Hugo\u2019s development server. Add content Add a new page to your site. hugo new content posts/my-first-post.md Hugo created the file in the content/posts directory. Open the file with your editor. +++ title = 'My First Post' date = 2024-01-14T07:07:07+01:00 draft = true +++ Notice the draft value in the front matter is true . By default, Hugo does not publish draft content when you build the site. Learn more about draft, future, and expired content . Add some Markdown to the body of the post, but do not change the draft value. +++ title = 'My First Post' date = 2024-01-14T07:07:07+01:00 draft = true +++ ## Introduction This is **bold** text, and this is *emphasized* text. Visit the [Hugo](https://gohugo.io) website! Save the file, then start Hugo\u2019s development server to view the site. You can run either of the following commands to include draft content. hugo server --buildDrafts hugo server -D View your site at the URL displayed in your terminal. Keep the development server running as you continue to add and change content. When satisfied with your new content, set the front matter draft parameter to false . Hugo\u2019s rendering engine conforms to the CommonMark specification for Markdown. The CommonMark organization provides a useful live testing tool powered by the reference implementation. Configure the site With your editor, open the site configuration file ( hugo.toml ) in the root of your project. baseURL = 'https://example.org/' languageCode = 'en-us' title = 'My New Hugo Site' theme = 'ananke' Make the following changes: Set the baseURL for your production site. This value must begin with the protocol and end with a slash, as shown above. Set the languageCode to your language and region. Set the title for your production site. Start Hugo\u2019s development server to see your changes, remembering to include draft content. hugo server -D Most theme authors provide configuration guidelines and options. Make sure to visit your theme\u2019s repository or documentation site for details. The New Dynamic , authors of the Ananke theme, provide documentation for configuration and usage. They also provide a demonstration site . Publish the site In this step you will publish your site, but you will not deploy it. When you publish your site, Hugo creates the entire static site in the public directory in the root of your project. This includes the HTML files, and assets such as images, CSS files, and JavaScript files. When you publish your site, you typically do not want to include draft, future, or expired content . The command is simple. hugo To learn how to deploy your site, see the hosting and deployment section. Ask for help Hugo\u2019s forum is an active community of users and developers who answer questions, share knowledge, and provide examples. A quick search of over 20,000 topics will often answer your question. Please be sure to read about requesting help before asking your first question. Other resources For other resources to help you learn Hugo, including books and video tutorials, see the external learning resources page. See also BSD Basic usage Development External learning resources GitInfo On this page Prerequisites Create a site Add content Configure the site Publish the site Ask for help Other resources Last updated: February 11, 2024: Capitalize the word Markdown throughout the documentation (c60cd20a8) Improve this page By the Hugo Authors File an Issue Get Help @GoHugoIO @spf13 @bepsays Hugo Sponsors The Hugo logos are copyright \u00a9 Steve Francia 2013\u20132024. The Hugo Gopher is based on an original work by Ren\u00e9e French. News Docs Themes Showcase Community GitHub About Installation Getting started Quick reference Content management Templates Functions Methods Render hooks Hugo Modules Hugo Pipes CLI Troubleshooting Developer tools Hosting and deployment Contribute Maintenance Menu Docs Menu",
    "https://gohugo.io/getting-started/usage/": "HUGO News Docs Themes Showcase Community GitHub Search gohugoio Star About In this section Introduction Features Privacy Security License Installation In this section macOS Linux Windows BSD Getting started In this section Quick start Basic usage Directory structure Configuration Configure markup Glossary of terms External learning resources Quick reference In this section Emojis Functions Methods Page collections Content management In this section Organization Page bundles Content formats Front matter Build options Page resources Image processing Shortcodes Related content Sections Content types Archetypes Taxonomies Summaries Links and cross references URL management Menus Static files Table of contents Comments Multilingual Markdown attributes Syntax highlighting Diagrams Mathematics Templates In this section Introduction Template lookup order Base templates and blocks Single page templates List templates Homepage template Section templates Taxonomy templates Pagination Content view templates Partial templates Shortcode templates Menu templates Data templates RSS templates Sitemap templates Embedded templates Custom output formats 404 page Robots.txt Functions In this section cast collections compare crypto data debug diagrams encoding fmt global go template hugo images inflect js lang math openapi3 os partials path reflect resources safe strings templates time transform urls Methods In this section Duration Menu Menu entry Page Pages Resource Shortcode Site Taxonomy Time Render hooks In this section Introduction Code blocks Headings Images Links Hugo Modules In this section Configure Hugo modules Use Hugo Modules Theme components Hugo Pipes In this section Introduction Transpile Sass to CSS PostCSS PostProcess JavaScript building Babel Asset minification Concatenating assets Fingerprinting and SRI hashing Resource from string Resource from template CLI Troubleshooting In this section Audit Logging Inspection Deprecation Performance FAQs Developer tools In this section Editor plugins Front-ends Search Migrations Other projects Hosting and deployment In this section Hugo Deploy Deploy with Rclone Deploy with Rsync Host on 21YunBox Host on AWS Amplify Host on Azure Static Web Apps Host on Cloudflare Pages Host on Firebase Host on GitHub Pages Host on GitLab Pages Host on KeyCDN Host on Netlify Host on Render Contribute In this section Development Documentation Themes Maintenance GETTING STARTED Basic usage Hugo\u2019s command line interface (CLI) is fully featured but simple to use, even for those with limited experience working from the command line. Test your installation After installing Hugo, test your installation by running: hugo version You should see something like: hugo v0.123.0-3c8a4713908e48e6523f058ca126710397aa4ed5+extended linux/amd64 BuildDate=2024-02-19T16:32:38Z VendorInfo=gohugoio Display available commands To see a list of the available commands and flags: hugo help To get help with a subcommand, use the --help flag. For example: hugo server --help Build your site To build your site, cd into your project directory and run: hugo The hugo command builds your site, publishing the files to the public directory. To publish your site to a different directory, use the --destination flag or set publishDir in your site configuration. Hugo does not clear the public directory before building your site. Existing files are overwritten, but not deleted. This behavior is intentional to prevent the inadvertent removal of files that you may have added to the public directory after the build. Depending on your needs, you may wish to manually clear the contents of the public directory before every build. Draft, future, and expired content Hugo allows you to set draft , date , publishDate , and expiryDate in the front matter of your content. By default, Hugo will not publish content when: The draft value is true The date is in the future The publishDate is in the future The expiryDate is in the past New in v0.123.0 Hugo publishes descendants of draft, future, and expired node pages. To prevent publication of these descendants, use the cascade front matter field to cascade build options to the descendant pages. You can override the default behavior when running hugo or hugo server with command line flags: hugo --buildDrafts # or -D hugo --buildExpired # or -E hugo --buildFuture # or -F Although you can also set these values in your site configuration, it can lead to unwanted results unless all content authors are aware of, and understand, the settings. As noted above, Hugo does not clear the public directory before building your site. Depending on the current evaluation of the four conditions above, after the build your public directory may contain extraneous files from a previous build. A common practice is to manually clear the contents of the public directory before each build to remove draft, expired, and future content. Develop and test your site To view your site while developing layouts or creating content, cd into your project directory and run: hugo server The hugo server command builds your site into memory, and serves your pages using a minimal HTTP server. When you run hugo server it will display the URL of your local site: Web Server is available at http://localhost:1313/ While the server is running, it watches your project directory for changes to assets, configuration, content, data, layouts, translations, and static files. When it detects a change, the server rebuilds your site and refreshes your browser using LiveReload . Most Hugo builds are so fast that you may not notice the change unless you are looking directly at your browser. LiveReload While the server is running, Hugo injects JavaScript into the generated HTML pages. The LiveReload script creates a connection from the browser to the server via web sockets. You do not need to install any software or browser plugins, nor is any configuration required. Automatic redirection When editing content, if you want your browser to automatically redirect to the page you last modified, run: hugo server --navigateToChanged Deploy your site As noted above, Hugo does not clear the public directory before building your site. Manually clear the contents of the public directory before each build to remove draft, expired, and future content. When you are ready to deploy your site, run: hugo This builds your site, publishing the files to the public directory. The directory structure will look something like this: public/ \u251c\u2500\u2500 categories/ \u2502   \u251c\u2500\u2500 index.html \u2502   \u2514\u2500\u2500 index.xml  <-- RSS feed for this section \u251c\u2500\u2500 post/ \u2502   \u251c\u2500\u2500 my-first-post/ \u2502   \u2502   \u2514\u2500\u2500 index.html \u2502   \u251c\u2500\u2500 index.html \u2502   \u2514\u2500\u2500 index.xml  <-- RSS feed for this section \u251c\u2500\u2500 tags/ \u2502   \u251c\u2500\u2500 index.html \u2502   \u2514\u2500\u2500 index.xml  <-- RSS feed for this section \u251c\u2500\u2500 index.html \u251c\u2500\u2500 index.xml      <-- RSS feed for the site \u2514\u2500\u2500 sitemap.xml In a simple hosting environment, where you typically ftp , rsync , or scp your files to the root of a virtual host, the contents of the public directory are all that you need. Most of our users deploy their sites using a CI/CD workflow, where a push 1 to their GitHub or GitLab repository triggers a build and deployment. Popular providers include AWS Amplify , CloudCannon , Cloudflare Pages , GitHub Pages , GitLab Pages , and Netlify . Learn more in the hosting and deployment section. The Git repository contains the entire project directory, typically excluding the public directory because the site is built after the push. \u21a9\ufe0e See also External learning resources Quick start On this page Test your installation Display available commands Build your site Draft, future, and expired content Develop and test your site Deploy your site Last updated: March 10, 2024: Miscellaneous edits towards the goal of consistent language (e04291a99) Improve this page By the Hugo Authors File an Issue Get Help @GoHugoIO @spf13 @bepsays Hugo Sponsors The Hugo logos are copyright \u00a9 Steve Francia 2013\u20132024. The Hugo Gopher is based on an original work by Ren\u00e9e French. News Docs Themes Showcase Community GitHub About Installation Getting started Quick reference Content management Templates Functions Methods Render hooks Hugo Modules Hugo Pipes CLI Troubleshooting Developer tools Hosting and deployment Contribute Maintenance Menu Docs Menu",
    "https://gohugo.io/getting-started/directory-structure/": "HUGO News Docs Themes Showcase Community GitHub Search gohugoio Star About In this section Introduction Features Privacy Security License Installation In this section macOS Linux Windows BSD Getting started In this section Quick start Basic usage Directory structure Configuration Configure markup Glossary of terms External learning resources Quick reference In this section Emojis Functions Methods Page collections Content management In this section Organization Page bundles Content formats Front matter Build options Page resources Image processing Shortcodes Related content Sections Content types Archetypes Taxonomies Summaries Links and cross references URL management Menus Static files Table of contents Comments Multilingual Markdown attributes Syntax highlighting Diagrams Mathematics Templates In this section Introduction Template lookup order Base templates and blocks Single page templates List templates Homepage template Section templates Taxonomy templates Pagination Content view templates Partial templates Shortcode templates Menu templates Data templates RSS templates Sitemap templates Embedded templates Custom output formats 404 page Robots.txt Functions In this section cast collections compare crypto data debug diagrams encoding fmt global go template hugo images inflect js lang math openapi3 os partials path reflect resources safe strings templates time transform urls Methods In this section Duration Menu Menu entry Page Pages Resource Shortcode Site Taxonomy Time Render hooks In this section Introduction Code blocks Headings Images Links Hugo Modules In this section Configure Hugo modules Use Hugo Modules Theme components Hugo Pipes In this section Introduction Transpile Sass to CSS PostCSS PostProcess JavaScript building Babel Asset minification Concatenating assets Fingerprinting and SRI hashing Resource from string Resource from template CLI Troubleshooting In this section Audit Logging Inspection Deprecation Performance FAQs Developer tools In this section Editor plugins Front-ends Search Migrations Other projects Hosting and deployment In this section Hugo Deploy Deploy with Rclone Deploy with Rsync Host on 21YunBox Host on AWS Amplify Host on Azure Static Web Apps Host on Cloudflare Pages Host on Firebase Host on GitHub Pages Host on GitLab Pages Host on KeyCDN Host on Netlify Host on Render Contribute In this section Development Documentation Themes Maintenance GETTING STARTED FUNDAMENTALS Directory structure Each Hugo project is a directory, with subdirectories that contribute to the content, structure, behavior, and presentation of your site. Site skeleton Hugo generates a project skeleton when you create a new site. For example, this command: hugo new site my-site Creates this directory structure: my-site/ \u251c\u2500\u2500 archetypes/ \u2502   \u2514\u2500\u2500 default.md \u251c\u2500\u2500 assets/ \u251c\u2500\u2500 content/ \u251c\u2500\u2500 data/ \u251c\u2500\u2500 i18n/ \u251c\u2500\u2500 layouts/ \u251c\u2500\u2500 static/ \u251c\u2500\u2500 themes/ \u2514\u2500\u2500 hugo.toml         <-- site configuration Depending on requirements, you may wish to organize your site configuration into subdirectories: my-site/ \u251c\u2500\u2500 archetypes/ \u2502   \u2514\u2500\u2500 default.md \u251c\u2500\u2500 assets/ \u251c\u2500\u2500 config/           <-- site configuration \u2502   \u2514\u2500\u2500 _default/ \u2502       \u2514\u2500\u2500 hugo.toml \u251c\u2500\u2500 content/ \u251c\u2500\u2500 data/ \u251c\u2500\u2500 i18n/ \u251c\u2500\u2500 layouts/ \u251c\u2500\u2500 static/ \u2514\u2500\u2500 themes/ When you build your site, Hugo creates a public directory, and typically a resources directory as well: my-site/ \u251c\u2500\u2500 archetypes/ \u2502   \u2514\u2500\u2500 default.md \u251c\u2500\u2500 assets/ \u251c\u2500\u2500 config/ \u2502   \u2514\u2500\u2500 _default/ \u2502       \u2514\u2500\u2500 hugo.toml \u251c\u2500\u2500 content/ \u251c\u2500\u2500 data/ \u251c\u2500\u2500 i18n/ \u251c\u2500\u2500 layouts/ \u251c\u2500\u2500 public/       <-- created when you build your site \u251c\u2500\u2500 resources/    <-- created when you build your site \u251c\u2500\u2500 static/ \u2514\u2500\u2500 themes/ Directories Each of the subdirectories contributes to the content, structure, behavior, or presentation of your site. archetypes The archetypes directory contains templates for new content. See details . assets The assets directory contains global resources typically passed through an asset pipeline. This includes resources such as images, CSS, Sass, JavaScript, and TypeScript. See details . config The config directory contains your site configuration, possibly split into multiple subdirectories and files. For projects with minimal configuration or projects that do not need to behave differently in different environments, a single configuration file named hugo.toml in the root of the project is sufficient. See details . content The content directory contains the markup files (typically Markdown) and page resources that comprise the content of your site. See details . data The data directory contains data files (JSON, TOML, YAML, or XML) that augment content, configuration, localization, and navigation. See details . i18n The i18n directory contains translation tables for multilingual sites. See details . layouts The layouts directory contains templates to transform content, data, and resources into a complete website. See details . public The public directory contains the published website, generated when you run the hugo or hugo server commands. Hugo recreates this directory and its content as needed. See details . resources The resources directory contains cached output from Hugo\u2019s asset pipelines, generated when you run the hugo or hugo server commands. By default this cache directory includes CSS and images. Hugo recreates this directory and its content as needed. static The static directory contains files that will be copied to the public directory when you build your site. For example: favicon.ico , robots.txt , and files that verify site ownership. Before the introduction of page bundles and asset pipelines , the static directory was also used for images, CSS, and JavaScript. See details . themes The themes directory contains one or more themes , each in its own subdirectory. Union file system Hugo creates a union file system, allowing you to mount two or more directories to the same location. For example, let\u2019s say your home directory contains a Hugo project in one directory, and shared content in another: home/ \u2514\u2500\u2500 user/ \u251c\u2500\u2500 my-site/ \u2502   \u251c\u2500\u2500 content/ \u2502   \u2502   \u251c\u2500\u2500 books/ \u2502   \u2502   \u2502   \u251c\u2500\u2500 _index.md \u2502   \u2502   \u2502   \u251c\u2500\u2500 book-1.md \u2502   \u2502   \u2502   \u2514\u2500\u2500 book-2.md \u2502   \u2502   \u2514\u2500\u2500 _index.md \u2502   \u251c\u2500\u2500 themes/ \u2502   \u2502   \u2514\u2500\u2500 my-theme/ \u2502   \u2514\u2500\u2500 hugo.toml \u2514\u2500\u2500 shared-content/ \u2514\u2500\u2500 films/ \u251c\u2500\u2500 _index.md \u251c\u2500\u2500 film-1.md \u2514\u2500\u2500 film-2.md You can include the shared content when you build your site using mounts. In your site configuration: hugo. yaml toml json module : mounts : - source : content target : content - source : /home/user/shared-content target : content [ module ] [[ module . mounts ]] source = 'content' target = 'content' [[ module . mounts ]] source = '/home/user/shared-content' target = 'content' { \"module\" : { \"mounts\" : [ { \"source\" : \"content\" , \"target\" : \"content\" }, { \"source\" : \"/home/user/shared-content\" , \"target\" : \"content\" } ] } } When you overlay one directory on top of another, you must mount both directories. If you think you need a symbolic link in your project directory, use Hugo\u2019s union file system instead. After mounting, the union file system has this structure: home/ \u2514\u2500\u2500 user/ \u2514\u2500\u2500 my-site/ \u251c\u2500\u2500 content/ \u2502   \u251c\u2500\u2500 books/ \u2502   \u2502   \u251c\u2500\u2500 _index.md \u2502   \u2502   \u251c\u2500\u2500 book-1.md \u2502   \u2502   \u2514\u2500\u2500 book-2.md \u2502   \u251c\u2500\u2500 films/ \u2502   \u2502   \u251c\u2500\u2500 _index.md \u2502   \u2502   \u251c\u2500\u2500 film-1.md \u2502   \u2502   \u2514\u2500\u2500 film-2.md \u2502   \u2514\u2500\u2500 _index.md \u251c\u2500\u2500 themes/ \u2502   \u2514\u2500\u2500 my-theme/ \u2514\u2500\u2500 hugo.toml When two or more files have the same path, the order of precedence follows the order of the mounts. For example, if the shared content directory contains books/book-1.md , it will be ignored because the project\u2019s content directory was mounted first. You can mount directories to archetypes , assets , content , data , i18n , layouts , and static . See details . You can also mount directories from Git repositories using Hugo Modules. See details . Theme skeleton Hugo generates a functional theme skeleton when you create a new theme. For example, this command: hugo new theme my-theme Creates this directory structure (subdirectories not shown): my-theme/ \u251c\u2500\u2500 archetypes/ \u251c\u2500\u2500 assets/ \u251c\u2500\u2500 content/ \u251c\u2500\u2500 data/ \u251c\u2500\u2500 i18n/ \u251c\u2500\u2500 layouts/ \u251c\u2500\u2500 static/ \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 README.md \u251c\u2500\u2500 hugo.toml \u2514\u2500\u2500 theme.toml Using the union file system described above, Hugo mounts each of these directories to the corresponding location in the project. When two files have the same path, the file in the project directory takes precedence. This allows you, for example, to override a theme\u2019s template by placing a copy in the same location within the project directory. If you are simultaneously using components from two or more themes or modules, and there\u2019s a path collision, the first mount takes precedence. See also Static files Comments Content organization Content types Sections On this page Site skeleton Directories Union file system Theme skeleton Last updated: March 25, 2024: Update directory-structure.md (39261556a) Improve this page By the Hugo Authors File an Issue Get Help @GoHugoIO @spf13 @bepsays Hugo Sponsors The Hugo logos are copyright \u00a9 Steve Francia 2013\u20132024. The Hugo Gopher is based on an original work by Ren\u00e9e French. News Docs Themes Showcase Community GitHub About Installation Getting started Quick reference Content management Templates Functions Methods Render hooks Hugo Modules Hugo Pipes CLI Troubleshooting Developer tools Hosting and deployment Contribute Maintenance Menu Docs Menu",
    "https://gohugo.io/installation/linux/": "HUGO News Docs Themes Showcase Community GitHub Search gohugoio Star About In this section Introduction Features Privacy Security License Installation In this section macOS Linux Windows BSD Getting started In this section Quick start Basic usage Directory structure Configuration Configure markup Glossary of terms External learning resources Quick reference In this section Emojis Functions Methods Page collections Content management In this section Organization Page bundles Content formats Front matter Build options Page resources Image processing Shortcodes Related content Sections Content types Archetypes Taxonomies Summaries Links and cross references URL management Menus Static files Table of contents Comments Multilingual Markdown attributes Syntax highlighting Diagrams Mathematics Templates In this section Introduction Template lookup order Base templates and blocks Single page templates List templates Homepage template Section templates Taxonomy templates Pagination Content view templates Partial templates Shortcode templates Menu templates Data templates RSS templates Sitemap templates Embedded templates Custom output formats 404 page Robots.txt Functions In this section cast collections compare crypto data debug diagrams encoding fmt global go template hugo images inflect js lang math openapi3 os partials path reflect resources safe strings templates time transform urls Methods In this section Duration Menu Menu entry Page Pages Resource Shortcode Site Taxonomy Time Render hooks In this section Introduction Code blocks Headings Images Links Hugo Modules In this section Configure Hugo modules Use Hugo Modules Theme components Hugo Pipes In this section Introduction Transpile Sass to CSS PostCSS PostProcess JavaScript building Babel Asset minification Concatenating assets Fingerprinting and SRI hashing Resource from string Resource from template CLI Troubleshooting In this section Audit Logging Inspection Deprecation Performance FAQs Developer tools In this section Editor plugins Front-ends Search Migrations Other projects Hosting and deployment In this section Hugo Deploy Deploy with Rclone Deploy with Rsync Host on 21YunBox Host on AWS Amplify Host on Azure Static Web Apps Host on Cloudflare Pages Host on Firebase Host on GitHub Pages Host on GitLab Pages Host on KeyCDN Host on Netlify Host on Render Contribute In this section Development Documentation Themes Maintenance INSTALLATION Linux Install Hugo on Linux. Editions Hugo is available in two editions: standard and extended. With the extended edition you can: Encode to the WebP format when processing images . You can decode WebP images with either edition. Transpile Sass to CSS using the embedded LibSass transpiler. The extended edition is not required to use the Dart Sass transpiler. We recommend that you install the extended edition. Prerequisites Although not required in all cases, Git , Go , and Dart Sass are commonly used when working with Hugo. Git is required to: Build Hugo from source Use the Hugo Modules feature Install a theme as a Git submodule Access commit information from a local Git repository Host your site with services such as CloudCannon , Cloudflare Pages , GitHub Pages , GitLab Pages , and Netlify Go is required to: Build Hugo from source Use the Hugo Modules feature Dart Sass is required to transpile Sass to CSS when using the latest features of the Sass language. Please refer to the relevant documentation for installation instructions: Git Go Dart Sass Prebuilt binaries Prebuilt binaries are available for a variety of operating systems and architectures. Visit the latest release page, and scroll down to the Assets section. Download the archive for the desired edition, operating system, and architecture Extract the archive Move the executable to the desired directory Add this directory to the PATH environment variable Verify that you have execute permission on the file Please consult your operating system documentation if you need help setting file permissions or modifying your PATH environment variable. If you do not see a prebuilt binary for the desired edition, operating system, and architecture, install Hugo using one of the methods described below. Package managers Snap Snap is a free and open-source package manager for Linux. Available for most distributions , snap packages are simple to install and are automatically updated. The Hugo snap package is strictly confined . Strictly confined snaps run in complete isolation, up to a minimal access level that\u2019s deemed always safe. The sites you create and build must be located within your home directory, or on removable media. To install the extended edition of Hugo: sudo snap install hugo To enable or revoke access to removable media: sudo snap connect hugo:removable-media sudo snap disconnect hugo:removable-media To enable or revoke access to SSH keys: sudo snap connect hugo:ssh-keys sudo snap disconnect hugo:ssh-keys Homebrew Homebrew is a free and open-source package manager for macOS and Linux. To install the extended edition of Hugo: brew install hugo Repository packages Most Linux distributions maintain a repository for commonly installed applications. The Hugo version available in package repositories varies based on Linux distribution and release, and in some cases will not be the latest version . Use one of the other installation methods if your package repository does not provide the desired version. Alpine Linux To install the extended edition of Hugo on Alpine Linux : doas apk add --no-cache --repository = https://dl-cdn.alpinelinux.org/alpine/edge/community hugo Arch Linux Derivatives of the Arch Linux distribution of Linux include EndeavourOS , Garuda Linux , Manjaro , and others. To install the extended edition of Hugo: sudo pacman -S hugo Debian Derivatives of the Debian distribution of Linux include elementary OS , KDE neon , Linux Lite , Linux Mint , MX Linux , Pop!_OS , Ubuntu , Zorin OS , and others. To install the extended edition of Hugo: sudo apt install hugo You can also download Debian packages from the latest release page. Exherbo To install the extended edition of Hugo on Exherbo : Add this line to /etc/paludis/options.conf: www-apps/hugo extended Install using the Paludis package manager: cave resolve -x repository/heirecka cave resolve -x hugo Fedora Derivatives of the Fedora distribution of Linux include CentOS , Red Hat Enterprise Linux , and others. To install the extended edition of Hugo: sudo dnf install hugo Gentoo Derivatives of the Gentoo distribution of Linux include Calculate Linux , Funtoo , and others. To install the extended edition of Hugo: Specify the extended USE flag in /etc/portage/package.use/hugo: www-apps/hugo extended Build using the Portage package manager: sudo emerge www-apps/hugo openSUSE Derivatives of the openSUSE distribution of Linux include GeckoLinux , Linux Karmada , and others. To install the extended edition of Hugo: sudo zypper install hugo Solus The Solus distribution of Linux includes Hugo in its package repository. To install the extended edition of Hugo: sudo eopkg install hugo Build from source To build the extended edition of Hugo from source you must: Install Git Install Go version 1.20 or later Install a C compiler, either GCC or Clang Update your PATH environment variable as described in the Go documentation The install directory is controlled by the GOPATH and GOBIN environment variables. If GOBIN is set, binaries are installed to that directory. If GOPATH is set, binaries are installed to the bin subdirectory of the first directory in the GOPATH list. Otherwise, binaries are installed to the bin subdirectory of the default GOPATH ( $HOME/go or %USERPROFILE%\\go ). Then build and test: CGO_ENABLED = 1 go install -tags extended github.com/gohugoio/hugo@latest hugo version Comparison Prebuilt binaries Package managers Repository packages Build from source Easy to install? \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f Easy to upgrade? \u2714\ufe0f \u2714\ufe0f varies \u2714\ufe0f Easy to downgrade? \u2714\ufe0f \u2714\ufe0f 1 varies \u2714\ufe0f Automatic updates? \u274c varies 2 \u274c \u274c Latest version available? \u2714\ufe0f \u2714\ufe0f varies \u2714\ufe0f Easy if a previous version is still installed. \u21a9\ufe0e Snap packages are automatically updated. Homebrew requires advanced configuration. \u21a9\ufe0e See also macOS BSD Windows Development GitInfo On this page Editions Prerequisites Prebuilt binaries Package managers Repository packages Build from source Comparison Last updated: April 7, 2024: Fix typo (898d7c261) Improve this page By the Hugo Authors File an Issue Get Help @GoHugoIO @spf13 @bepsays Hugo Sponsors The Hugo logos are copyright \u00a9 Steve Francia 2013\u20132024. The Hugo Gopher is based on an original work by Ren\u00e9e French. News Docs Themes Showcase Community GitHub About Installation Getting started Quick reference Content management Templates Functions Methods Render hooks Hugo Modules Hugo Pipes CLI Troubleshooting Developer tools Hosting and deployment Contribute Maintenance Menu Docs Menu",
    "https://gohugo.io/getting-started/configuration/": "HUGO News Docs Themes Showcase Community GitHub Search gohugoio Star About In this section Introduction Features Privacy Security License Installation In this section macOS Linux Windows BSD Getting started In this section Quick start Basic usage Directory structure Configuration Configure markup Glossary of terms External learning resources Quick reference In this section Emojis Functions Methods Page collections Content management In this section Organization Page bundles Content formats Front matter Build options Page resources Image processing Shortcodes Related content Sections Content types Archetypes Taxonomies Summaries Links and cross references URL management Menus Static files Table of contents Comments Multilingual Markdown attributes Syntax highlighting Diagrams Mathematics Templates In this section Introduction Template lookup order Base templates and blocks Single page templates List templates Homepage template Section templates Taxonomy templates Pagination Content view templates Partial templates Shortcode templates Menu templates Data templates RSS templates Sitemap templates Embedded templates Custom output formats 404 page Robots.txt Functions In this section cast collections compare crypto data debug diagrams encoding fmt global go template hugo images inflect js lang math openapi3 os partials path reflect resources safe strings templates time transform urls Methods In this section Duration Menu Menu entry Page Pages Resource Shortcode Site Taxonomy Time Render hooks In this section Introduction Code blocks Headings Images Links Hugo Modules In this section Configure Hugo modules Use Hugo Modules Theme components Hugo Pipes In this section Introduction Transpile Sass to CSS PostCSS PostProcess JavaScript building Babel Asset minification Concatenating assets Fingerprinting and SRI hashing Resource from string Resource from template CLI Troubleshooting In this section Audit Logging Inspection Deprecation Performance FAQs Developer tools In this section Editor plugins Front-ends Search Migrations Other projects Hosting and deployment In this section Hugo Deploy Deploy with Rclone Deploy with Rsync Host on 21YunBox Host on AWS Amplify Host on Azure Static Web Apps Host on Cloudflare Pages Host on Firebase Host on GitHub Pages Host on GitLab Pages Host on KeyCDN Host on Netlify Host on Render Contribute In this section Development Documentation Themes Maintenance GETTING STARTED FUNDAMENTALS Configure Hugo How to configure your Hugo site. Configuration file Create a site configuration file in the root of your project directory, naming it hugo.toml , hugo.yaml , or hugo.json , with that order of precedence. my-project/ \u2514\u2500\u2500 hugo.toml With v0.109.0 and earlier the basename of the site configuration file was config instead of hugo . You can use either, but should transition to the new naming convention when practical. A simple example: hugo. yaml toml json baseURL : https://example.org/ languageCode : en-us params : contact : email : info@example.org phone : +1 202-555-1212 subtitle : The Best Widgets on Earth title : ABC Widgets, Inc. baseURL = 'https://example.org/' languageCode = 'en-us' title = 'ABC Widgets, Inc.' [ params ] subtitle = 'The Best Widgets on Earth' [ params . contact ] email = 'info@example.org' phone = '+1 202-555-1212' { \"baseURL\" : \"https://example.org/\" , \"languageCode\" : \"en-us\" , \"params\" : { \"contact\" : { \"email\" : \"info@example.org\" , \"phone\" : \"+1 202-555-1212\" }, \"subtitle\" : \"The Best Widgets on Earth\" }, \"title\" : \"ABC Widgets, Inc.\" } To use a different configuration file when building your site, use the --config flag: hugo --config other.toml Combine two or more configuration files, with left-to-right precedence: hugo --config a.toml,b.yaml,c.json See the specifications for each file format: TOML , YAML , and JSON . Configuration directory Instead of a single site configuration file, split your configuration by environment , root configuration key, and language. For example: my-project/ \u2514\u2500\u2500 config/ \u251c\u2500\u2500 _default/ \u2502   \u251c\u2500\u2500 hugo.toml \u2502   \u251c\u2500\u2500 menus.en.toml \u2502   \u251c\u2500\u2500 menus.de.toml \u2502   \u2514\u2500\u2500 params.toml \u2514\u2500\u2500 production/ \u2514\u2500\u2500 params.toml The root configuration keys are build , caches , cascade , deployment , frontmatter , imaging , languages , markup , mediatypes , menus , minify , module , outputformats , outputs , params , permalinks , privacy , related , security , segments , server , services , sitemap , and taxonomies . Omit the root key When splitting the configuration by root key, omit the root key in the given file. For example, these are equivalent: hugo. yaml toml json params : foo : bar [ params ] foo = 'bar' { \"params\" : { \"foo\" : \"bar\" } } params. yaml toml json foo : bar foo = 'bar' { \"foo\" : \"bar\" } Recursive parsing Hugo parses the config directory recursively, allowing you to organize the files into subdirectories. For example: my-project/ \u2514\u2500\u2500 config/ \u2514\u2500\u2500 _default/ \u251c\u2500\u2500 navigation/ \u2502   \u251c\u2500\u2500 menus.de.toml \u2502   \u2514\u2500\u2500 menus.en.toml \u2514\u2500\u2500 hugo.toml Example my-project/ \u2514\u2500\u2500 config/ \u251c\u2500\u2500 _default/ \u2502   \u251c\u2500\u2500 hugo.toml \u2502   \u251c\u2500\u2500 menus.en.toml \u2502   \u251c\u2500\u2500 menus.de.toml \u2502   \u2514\u2500\u2500 params.toml \u251c\u2500\u2500 production/ \u2502   \u251c\u2500\u2500 hugo.toml \u2502   \u2514\u2500\u2500 params.toml \u2514\u2500\u2500 staging/ \u251c\u2500\u2500 hugo.toml \u2514\u2500\u2500 params.toml Considering the structure above, when running hugo --environment staging , Hugo will use every setting from config/_default and merge staging \u2019s on top of those. Let\u2019s take an example to understand this better. Let\u2019s say you are using Google Analytics for your website. This requires you to specify a Google tag ID in your site configuration: hugo. yaml toml json services : googleAnalytics : ID : G-XXXXXXXXX [ services ] [ services . googleAnalytics ] ID = 'G-XXXXXXXXX' { \"services\" : { \"googleAnalytics\" : { \"ID\" : \"G-XXXXXXXXX\" } } } Now consider the following scenario: You don\u2019t want to load the analytics code when running hugo server . You want to use different Google tag IDs for your production and staging environments. For example: G-PPPPPPPPP for production G-SSSSSSSSS for staging To satisfy these requirements, configure your site as follows: config/_default/hugo.toml Exclude the services.googleAnalytics section. This will prevent loading of the analytics code when you run hugo server . By default, Hugo sets its environment to development when running hugo server . In the absence of a config/development directory, Hugo uses the config/_default directory. config/production/hugo.toml Include this section only: hugo. yaml toml json services : googleAnalytics : ID : G-PPPPPPPPP [ services ] [ services . googleAnalytics ] ID = 'G-PPPPPPPPP' { \"services\" : { \"googleAnalytics\" : { \"ID\" : \"G-PPPPPPPPP\" } } } You do not need to include other parameters in this file. Include only those parameters that are specific to your production environment. Hugo will merge these parameters with the default configuration. By default, Hugo sets its environment to production when running hugo . The analytics code will use the G-PPPPPPPPP tag ID. config/staging/hugo.toml Include this section only: hugo. yaml toml json services : googleAnalytics : ID : G-SSSSSSSSS [ services ] [ services . googleAnalytics ] ID = 'G-SSSSSSSSS' { \"services\" : { \"googleAnalytics\" : { \"ID\" : \"G-SSSSSSSSS\" } } } You do not need to include other parameters in this file. Include only those parameters that are specific to your staging environment. Hugo will merge these parameters with the default configuration. To build your staging site, run hugo --environment staging . The analytics code will use the G-SSSSSSSSS tag ID. Merge configuration from themes The configuration value for _merge can be one of: none No merge. shallow Only add values for new keys. deep Add values for new keys, merge existing. Note that you don\u2019t need to be so verbose as in the default setup below; a _merge value higher up will be inherited if not set. hugo. yaml toml json build : _merge : none caches : _merge : none cascade : _merge : none deployment : _merge : none frontmatter : _merge : none imaging : _merge : none languages : _merge : none en : _merge : none menus : _merge : shallow params : _merge : deep markup : _merge : none mediatypes : _merge : shallow menus : _merge : shallow minify : _merge : none module : _merge : none outputformats : _merge : shallow outputs : _merge : none params : _merge : deep permalinks : _merge : none privacy : _merge : none related : _merge : none security : _merge : none segments : _merge : none server : _merge : none services : _merge : none sitemap : _merge : none taxonomies : _merge : none [ build ] _merge = 'none' [ caches ] _merge = 'none' [ cascade ] _merge = 'none' [ deployment ] _merge = 'none' [ frontmatter ] _merge = 'none' [ imaging ] _merge = 'none' [ languages ] _merge = 'none' [ languages . en ] _merge = 'none' [ languages . en . menus ] _merge = 'shallow' [ languages . en . params ] _merge = 'deep' [ markup ] _merge = 'none' [ mediatypes ] _merge = 'shallow' [ menus ] _merge = 'shallow' [ minify ] _merge = 'none' [ module ] _merge = 'none' [ outputformats ] _merge = 'shallow' [ outputs ] _merge = 'none' [ params ] _merge = 'deep' [ permalinks ] _merge = 'none' [ privacy ] _merge = 'none' [ related ] _merge = 'none' [ security ] _merge = 'none' [ segments ] _merge = 'none' [ server ] _merge = 'none' [ services ] _merge = 'none' [ sitemap ] _merge = 'none' [ taxonomies ] _merge = 'none' { \"build\" : { \"_merge\" : \"none\" }, \"caches\" : { \"_merge\" : \"none\" }, \"cascade\" : { \"_merge\" : \"none\" }, \"deployment\" : { \"_merge\" : \"none\" }, \"frontmatter\" : { \"_merge\" : \"none\" }, \"imaging\" : { \"_merge\" : \"none\" }, \"languages\" : { \"_merge\" : \"none\" , \"en\" : { \"_merge\" : \"none\" , \"menus\" : { \"_merge\" : \"shallow\" }, \"params\" : { \"_merge\" : \"deep\" } } }, \"markup\" : { \"_merge\" : \"none\" }, \"mediatypes\" : { \"_merge\" : \"shallow\" }, \"menus\" : { \"_merge\" : \"shallow\" }, \"minify\" : { \"_merge\" : \"none\" }, \"module\" : { \"_merge\" : \"none\" }, \"outputformats\" : { \"_merge\" : \"shallow\" }, \"outputs\" : { \"_merge\" : \"none\" }, \"params\" : { \"_merge\" : \"deep\" }, \"permalinks\" : { \"_merge\" : \"none\" }, \"privacy\" : { \"_merge\" : \"none\" }, \"related\" : { \"_merge\" : \"none\" }, \"security\" : { \"_merge\" : \"none\" }, \"segments\" : { \"_merge\" : \"none\" }, \"server\" : { \"_merge\" : \"none\" }, \"services\" : { \"_merge\" : \"none\" }, \"sitemap\" : { \"_merge\" : \"none\" }, \"taxonomies\" : { \"_merge\" : \"none\" } } All configuration settings archetypeDir ( string ) The directory where Hugo finds archetype files (content templates). Default is archetypes . Also see Module Mounts Config for an alternative way to configure this directory (from Hugo 0.56). assetDir ( string ) The directory where Hugo finds asset files used in Hugo Pipes . Default is assets . Also see Module Mounts Config for an alternative way to configure this directory (from Hugo 0.56). baseURL ( string ) The absolute URL (protocol, host, path, and trailing slash) of your published site (e.g., https://www.example.org/docs/ ). build See Configure Build . buildDrafts ( bool ) Include drafts when building. Default is false . buildExpired ( bool ) Include content already expired. Default is false . buildFuture ( bool ) Include content with a future publication date. Default is false . caches See Configure File Caches . capitalizeListTitles New in v0.123.3 ( bool ) Whether to capitalize automatic list titles. Applicable to section, taxonomy, and term pages. Default is true . You can change the capitalization style in your site configuration to one of ap , chicago , go , firstupper , or none . See details . cascade Pass down default configuration values (front matter) to pages in the content tree. The options in site config is the same as in page front matter, see Front Matter Cascade . For a website in a single language, define the [[cascade]] in Front Matter . For a multilingual website, define the [[cascade]] in Site Config . To remain consistent and prevent unexpected behavior, do not mix these strategies. canonifyURLs ( bool ) Enable to turn relative URLs into absolute. Default is false . See details . cleanDestinationDir ( bool ) When building, removes files from destination not found in static directories. Default is false . contentDir ( string ) The directory from where Hugo reads content files. Default is content . Also see Module Mounts Config for an alternative way to configure this directory (from Hugo 0.56). copyright ( string ) Copyright notice for your site, typically displayed in the footer. dataDir ( string ) The directory from where Hugo reads data files. Default is data . Also see Module Mounts Config for an alternative way to configure this directory (from Hugo 0.56). defaultContentLanguage ( string ) Content without language indicator will default to this language. Default is en . defaultContentLanguageInSubdir ( bool ) Render the default content language in subdir, e.g. content/en/ . The site root / will then redirect to /en/ . Default is false . disableAliases ( bool ) Will disable generation of alias redirects. Note that even if disableAliases is set, the aliases themselves are preserved on the page. The motivation with this is to be able to generate 301 redirects in an .htaccess , a Netlify _redirects file or similar using a custom output format. Default is false . disableHugoGeneratorInject ( bool ) Hugo will, by default, inject a generator meta tag in the HTML head on the home page only . You can turn it off, but we would really appreciate if you don\u2019t, as this is a good way to watch Hugo\u2019s popularity on the rise. Default is false . disableKinds ( string slice ) Disable rendering of the specified page kinds , any of 404 , home , page , robotstxt , rss , section , sitemap , taxonomy , or term . disableLiveReload ( bool ) Disable automatic live reloading of browser window. Default is false . disablePathToLower ( bool ) Do not convert the url/path to lowercase. Default is false . enableEmoji ( bool ) Enable Emoji emoticons support for page content; see the emoji shortcode quick reference guide . Default is false . enableGitInfo ( bool ) Enable .GitInfo object for each page (if the Hugo site is versioned by Git). This will then update the Lastmod parameter for each page using the last git commit date for that content file. Default is false . enableMissingTranslationPlaceholders ( bool ) Show a placeholder instead of the default value or an empty string if a translation is missing. Default is false . enableRobotsTXT ( bool ) Enable generation of robots.txt file. Default is false . frontmatter See Front matter Configuration . hasCJKLanguage ( bool ) If true, auto-detect Chinese/Japanese/Korean Languages in the content. This will make .Summary and .WordCount behave correctly for CJK languages. Default is false . imaging See image processing configuration . languageCode ( string ) A language tag as defined by RFC 5646 . This value is used to populate: The element in the internal RSS template The lang attribute of the element in the internal alias template languages See Configure Languages . disableLanguages See Disable a Language markup See Configure Markup . mediaTypes See Configure Media Types . menus See Menus . minify See Configure Minify . module Module configuration see module configuration . newContentEditor ( string ) The editor to use when creating new content. noChmod ( bool ) Don\u2019t sync permission mode of files. Default is false . noTimes ( bool ) Don\u2019t sync modification time of files. Default is false . outputFormats See custom output formats . paginate ( int ) Default number of elements per page in pagination . Default is 10 . paginatePath ( string ) The path element used during pagination ( https://example.org/page/2 ). Default is page . permalinks See Content Management . pluralizeListTitles ( bool ) Whether to pluralize automatic list titles. Applicable to section pages. Default is true . publishDir ( string ) The directory to where Hugo will write the final static site (the HTML files etc.). Default is public . related See Related Content . relativeURLs ( bool ) Enable this to make all relative URLs relative to content root. Note that this does not affect absolute URLs. Default is false . See details . renderSegments ( string slice ) A list of segments to render. If not set, everything will be rendered. This is more commonly set in a CLI flag, e.g. hugo --renderSegments segment1,segment2 . The segment names must match the names in the segments configuration. refLinksErrorLevel ( string ) When using ref or relref to resolve page links and a link cannot be resolved, it will be logged with this log level. Valid values are ERROR (default) or WARNING . Any ERROR will fail the build ( exit -1 ). Default is ERROR . refLinksNotFoundURL ( string ) URL to be used as a placeholder when a page reference cannot be found in ref or relref . Is used as-is. removePathAccents ( bool ) Removes non-spacing marks from composite characters in content paths. Default is false . content/post/h\u00fcg\u00f3.md \u2192 https://example.org/post/hugo/ sectionPagesMenu See Menus . security See Security Policy . segments See Segments . sitemap Default sitemap configuration . summaryLength ( int ) The length of text in words to show in a .Summary . Default is 70 . taxonomies See Configure Taxonomies . theme See module configuration for how to import a theme. themesDir ( string ) The directory where Hugo reads the themes from. Default is themes . timeout ( string ) Timeout for generating page contents, specified as a duration or in seconds. Note: this is used to bail out of recursive content generation. You might need to raise this limit if your pages are slow to generate (e.g., because they require large image processing or depend on remote contents). Default is 30s . timeZone ( string ) The time zone (or location), e.g. Europe/Oslo , used to parse front matter dates without such information and in the time function. The list of valid values may be system dependent, but should include UTC , Local , and any location in the IANA Time Zone database . title ( string ) Site title. titleCaseStyle ( string ) Default is ap . See Configure Title Case . uglyURLs ( bool ) When enabled, creates URL of the form /filename.html instead of /filename/ . Default is false . watch ( bool ) Watch filesystem for changes and recreate as needed. Default is false . If you are developing your site on a *nix machine, here is a handy shortcut for finding a configuration option from the command line: cd ~/sites/yourhugosite hugo config | grep emoji which shows output like enableemoji: true Configure build The build configuration section contains global build-related configuration options. hugo. yaml toml json build : buildStats : disableClasses : false disableIDs : false disableTags : false enable : false cacheBusters : - source : (postcss|tailwind)\\.config\\.js target : (css|styles|scss|sass) duplicateResourceFiles : false noJSConfigInAssets : false useResourceCacheWhen : fallback [ build ] duplicateResourceFiles = false noJSConfigInAssets = false useResourceCacheWhen = 'fallback' [ build . buildStats ] disableClasses = false disableIDs = false disableTags = false enable = false [[ build . cacheBusters ]] source = '(postcss|tailwind)\\.config\\.js' target = '(css|styles|scss|sass)' { \"build\" : { \"buildStats\" : { \"disableClasses\" : false , \"disableIDs\" : false , \"disableTags\" : false , \"enable\" : false }, \"cacheBusters\" : [ { \"source\" : \"(postcss|tailwind)\\\\.config\\\\.js\" , \"target\" : \"(css|styles|scss|sass)\" } ], \"duplicateResourceFiles\" : false , \"noJSConfigInAssets\" : false , \"useResourceCacheWhen\" : \"fallback\" } } buildStats New in v0.115.1 When enabled, creates a hugo_stats.json file in the root of your project. This file contains arrays of the class attributes, id attributes, and tags of every HTML element within your published site. Use this file as data source when removing unused CSS from your site. This process is also known as pruning, purging, or tree shaking. Exclude class attributes, id attributes, or tags from hugo_stats.json with the disableClasses , disableIDs , and disableTags keys. With v0.115.0 and earlier this feature was enabled by setting writeStats to true . Although still functional, the writeStats key will be deprecated in a future release. Given that CSS purging is typically limited to production builds, place the buildStats object below config/production . Built for speed, there may be \u201cfalse positive\u201d detections (e.g., HTML elements that are not HTML elements) while parsing the published site. These \u201cfalse positives\u201d are infrequent and inconsequential. Due to the nature of partial server builds, new HTML entities are added while the server is running, but old values will not be removed until you restart the server or run a regular hugo build. cachebusters See Configure Cache Busters noJSConfigInAssets Turn off writing a jsconfig.json into your /assets folder with mapping of imports from running js.Build . This file is intended to help with intellisense/navigation inside code editors such as VS Code . Note that if you do not use js.Build , no file will be written. useResourceCacheWhen When to use the cached resources in /resources/_gen for PostCSS and ToCSS. Valid values are never , always and fallback . The last value means that the cache will be tried if PostCSS/extended version is not available. Configure cache busters New in v0.112.0 The build.cachebusters configuration option was added to support development using Tailwind 3.x\u2019s JIT compiler where a build configuration may look like this: hugo. yaml toml json build : buildStats : enable : true cachebusters : - source : assets/watching/hugo_stats\\.json target : styles\\.css - source : (postcss|tailwind)\\.config\\.js target : css - source : assets/.*\\.(js|ts|jsx|tsx) target : js - source : assets/.*\\.(.*)$ target : $1 [ build ] [ build . buildStats ] enable = true [[ build . cachebusters ]] source = 'assets/watching/hugo_stats\\.json' target = 'styles\\.css' [[ build . cachebusters ]] source = '(postcss|tailwind)\\.config\\.js' target = 'css' [[ build . cachebusters ]] source = 'assets/.*\\.(js|ts|jsx|tsx)' target = 'js' [[ build . cachebusters ]] source = 'assets/.*\\.(.*)$' target = '$1' { \"build\" : { \"buildStats\" : { \"enable\" : true }, \"cachebusters\" : [ { \"source\" : \"assets/watching/hugo_stats\\\\.json\" , \"target\" : \"styles\\\\.css\" }, { \"source\" : \"(postcss|tailwind)\\\\.config\\\\.js\" , \"target\" : \"css\" }, { \"source\" : \"assets/.*\\\\.(js|ts|jsx|tsx)\" , \"target\" : \"js\" }, { \"source\" : \"assets/.*\\\\.(.*)$\" , \"target\" : \"$1\" } ] } } When buildStats New in v0.115.1 is enabled, Hugo writes a hugo_stats.json file on each build with HTML classes etc. that\u2019s used in the rendered output. Changes to this file will trigger a rebuild of the styles.css file. You also need to add hugo_stats.json to Hugo\u2019s server watcher. See Hugo Starter Tailwind Basic for a running example. source A regexp matching file(s) relative to one of the virtual component directories in Hugo, typically assets/... . target A regexp matching the keys in the resource cache that should be expired when source changes. You can use the matching regexp groups from source in the expression, e.g. $1 . Configure server This is only relevant when running hugo server , and it allows to set HTTP headers during development, which allows you to test out your Content Security Policy and similar. The configuration format matches Netlify\u2019s with slightly more powerful Glob matching : hugo. yaml toml json server : headers : - for : /** values : Content-Security-Policy : script-src localhost:1313 Referrer-Policy : strict-origin-when-cross-origin X-Content-Type-Options : nosniff X-Frame-Options : DENY X-XSS-Protection : 1 ; mode=block [ server ] [[ server . headers ]] for = '/**' [ server . headers . values ] Content-Security-Policy = 'script-src localhost:1313' Referrer-Policy = 'strict-origin-when-cross-origin' X-Content-Type-Options = 'nosniff' X-Frame-Options = 'DENY' X-XSS-Protection = '1; mode=block' { \"server\" : { \"headers\" : [ { \"for\" : \"/**\" , \"values\" : { \"Content-Security-Policy\" : \"script-src localhost:1313\" , \"Referrer-Policy\" : \"strict-origin-when-cross-origin\" , \"X-Content-Type-Options\" : \"nosniff\" , \"X-Frame-Options\" : \"DENY\" , \"X-XSS-Protection\" : \"1; mode=block\" } } ] } } Since this is \u201cdevelopment only\u201d, it may make sense to put it below the development environment: config/development/server. yaml toml json headers : - for : /** values : Content-Security-Policy : script-src localhost:1313 Referrer-Policy : strict-origin-when-cross-origin X-Content-Type-Options : nosniff X-Frame-Options : DENY X-XSS-Protection : 1 ; mode=block [[ headers ]] for = '/**' [ headers . values ] Content-Security-Policy = 'script-src localhost:1313' Referrer-Policy = 'strict-origin-when-cross-origin' X-Content-Type-Options = 'nosniff' X-Frame-Options = 'DENY' X-XSS-Protection = '1; mode=block' { \"headers\" : [ { \"for\" : \"/**\" , \"values\" : { \"Content-Security-Policy\" : \"script-src localhost:1313\" , \"Referrer-Policy\" : \"strict-origin-when-cross-origin\" , \"X-Content-Type-Options\" : \"nosniff\" , \"X-Frame-Options\" : \"DENY\" , \"X-XSS-Protection\" : \"1; mode=block\" } } ] } You can also specify simple redirects rules for the server. The syntax is again similar to Netlify\u2019s. Note that a status code of 200 will trigger a URL rewrite , which is what you want in SPA situations, e.g: config/development/server. yaml toml json redirects : - force : false from : /myspa/** status : 200 to : /myspa/ [[ redirects ]] force = false from = '/myspa/**' status = 200 to = '/myspa/' { \"redirects\" : [ { \"force\" : false , \"from\" : \"/myspa/**\" , \"status\" : 200 , \"to\" : \"/myspa/\" } ] } Setting force=true will make a redirect even if there is existing content in the path. Note that before Hugo 0.76 force was the default behavior, but this is inline with how Netlify does it. 404 server error page New in v0.103.0 Hugo will, by default, render all 404 errors when running hugo server with the 404.html template. Note that if you have already added one or more redirects to your server configuration , you need to add the 404 redirect explicitly, e.g: config/development/server. yaml toml json redirects : - from : /** status : 404 to : /404.html [[ redirects ]] from = '/**' status = 404 to = '/404.html' { \"redirects\" : [ { \"from\" : \"/**\" , \"status\" : 404 , \"to\" : \"/404.html\" } ] } Configure title case By default, Hugo follows the capitalization rules published in the Associated Press Stylebook when creating automatic section titles, and when transforming strings with the strings.Title function. Change this behavior by setting titleCaseStyle in your site configuration to any of the values below: ap Use the capitalization rules published in the Associated Press Stylebook . chicago Use the capitalization rules published in the Chicago Manual of Style . go Capitalize the first letter of every word. firstupper Capitalize the first letter of the first word. none Disable transformation of automatic section titles, and disable the transformation performed by the strings.Title function. This is useful if you would prefer to manually capitalize section titles as needed, and to bypass opinionated theme usage of the strings.Title function. Configuration environment variables DART_SASS_BINARY ( string ) The absolute path to the Dart Sass executable. By default, Hugo searches for the executable in each of the paths in the PATH environment variable. HUGO_ENVIRONMENT ( string ) Overrides the default environment , typically one of development , staging , or production . HUGO_FILE_LOG_FORMAT ( string ) A format string for the file path, line number, and column number displayed when reporting errors, or when calling the Position method from a shortcode or Markdown render hook. Valid tokens are :file , :line , and :col . Default is :file::line::col . New in v0.123.0 HUGO_MEMORYLIMIT ( int ) The maximum amount of system memory, in gigabytes, that Hugo can use while rendering your site. Default is 25% of total system memory. HUGO_NUMWORKERMULTIPLIER ( int ) The number of workers used in parallel processing. Default is the number of logical CPUs. Configure with environment variables In addition to the 3 configuration options already mentioned, configuration key-values can be defined through operating system environment variables. For example, the following command will effectively set a website\u2019s title on Unix-like systems: $ env HUGO_TITLE=\"Some Title\" hugo This is really useful if you use a service such as Netlify to deploy your site. Look at the Hugo docs Netlify configuration file for an example. Names must be prefixed with HUGO_ and the configuration key must be set in uppercase when setting operating system environment variables. To set configuration parameters, prefix the name with HUGO_PARAMS_ If you are using snake_cased variable names, the above will not work. Hugo determines the delimiter to use by the first character after HUGO . This allows you to define environment variables on the form HUGOxPARAMSxAPI_KEY=abcdefgh , using any allowed delimiter. Ignore content and data files when rendering This works, but we recommend you use the newer and more powerful includeFiles and excludeFiles mount options. To exclude specific files from the content , data , and i18n directories when rendering your site, set ignoreFiles to one or more regular expressions to match against the absolute file path. To ignore files ending with .foo or .boo : hugo. yaml toml json ignoreFiles : - \\.foo$ - \\.boo$ ignoreFiles = [ '\\.foo$' , '\\.boo$' ] { \"ignoreFiles\" : [ \"\\\\.foo$\" , \"\\\\.boo$\" ] } To ignore a file using the absolute file path: hugo. yaml toml json ignoreFiles : - ^/home/user/project/content/test\\.md$ ignoreFiles = [ '^/home/user/project/content/test\\.md$' ] { \"ignoreFiles\" : [ \"^/home/user/project/content/test\\\\.md$\" ] } Configure front matter Configure dates Dates are important in Hugo, and you can configure how Hugo assigns dates to your content pages. You do this by adding a frontmatter section to your hugo.toml . The default configuration is: hugo. yaml toml json frontmatter : date : - date - publishdate - pubdate - published - lastmod - modified expiryDate : - expirydate - unpublishdate lastmod : - : git - lastmod - modified - date - publishdate - pubdate - published publishDate : - publishdate - pubdate - published - date [ frontmatter ] date = [ 'date' , 'publishdate' , 'pubdate' , 'published' , 'lastmod' , 'modified' ] expiryDate = [ 'expirydate' , 'unpublishdate' ] lastmod = [ ':git' , 'lastmod' , 'modified' , 'date' , 'publishdate' , 'pubdate' , 'published' ] publishDate = [ 'publishdate' , 'pubdate' , 'published' , 'date' ] { \"frontmatter\" : { \"date\" : [ \"date\" , \"publishdate\" , \"pubdate\" , \"published\" , \"lastmod\" , \"modified\" ], \"expiryDate\" : [ \"expirydate\" , \"unpublishdate\" ], \"lastmod\" : [ \":git\" , \"lastmod\" , \"modified\" , \"date\" , \"publishdate\" , \"pubdate\" , \"published\" ], \"publishDate\" : [ \"publishdate\" , \"pubdate\" , \"published\" , \"date\" ] } } If you, as an example, have a non-standard date parameter in some of your content, you can override the setting for date : hugo. yaml toml json frontmatter : date : - myDate - : default [ frontmatter ] date = [ 'myDate' , ':default' ] { \"frontmatter\" : { \"date\" : [ \"myDate\" , \":default\" ] } } The :default is a shortcut to the default settings. The above will set .Date to the date value in myDate if present, if not we will look in date , publishDate , lastmod and pick the first valid date. In the list to the right, values starting with \u201c:\u201d are date handlers with a special meaning (see below). The others are just names of date parameters (case insensitive) in your front matter configuration. Also note that Hugo have some built-in aliases to the above: lastmod => modified , publishDate => pubdate , published and expiryDate => unpublishdate . With that, as an example, using pubDate as a date in front matter, will, by default, be assigned to .PublishDate . The special date handlers are: :fileModTime Fetches the date from the content file\u2019s last modification timestamp. An example: hugo. yaml toml json frontmatter : lastmod : - lastmod - : fileModTime - : default [ frontmatter ] lastmod = [ 'lastmod' , ':fileModTime' , ':default' ] { \"frontmatter\" : { \"lastmod\" : [ \"lastmod\" , \":fileModTime\" , \":default\" ] } } The above will try first to extract the value for .Lastmod starting with the lastmod front matter parameter, then the content file\u2019s modification timestamp. The last, :default should not be needed here, but Hugo will finally look for a valid date in :git , date and then publishDate . :filename Fetches the date from the content file\u2019s file name. For example, 2018-02-22-mypage.md will extract the date 2018-02-22 . Also, if slug is not set, mypage will be used as the value for .Slug . An example: hugo. yaml toml json frontmatter : date : - : filename - : default [ frontmatter ] date = [ ':filename' , ':default' ] { \"frontmatter\" : { \"date\" : [ \":filename\" , \":default\" ] } } The above will try first to extract the value for .Date from the file name, then it will look in front matter parameters date , publishDate and lastly lastmod . :git This is the Git author date for the last revision of this content file. This will only be set if --enableGitInfo is set or enableGitInfo = true is set in site configuration. Configure minify See the tdewolff/minify project page for details. Default configuration: hugo. yaml toml json minify : disableCSS : false disableHTML : false disableJS : false disableJSON : false disableSVG : false disableXML : false minifyOutput : false tdewolff : css : keepCSS2 : true precision : 0 html : keepComments : false keepConditionalComments : false keepDefaultAttrVals : true keepDocumentTags : true keepEndTags : true keepQuotes : false keepSpecialComments : true keepWhitespace : false templateDelims : - \"\" - \"\" js : keepVarNames : false precision : 0 version : 2022 json : keepNumbers : false precision : 0 svg : keepComments : false precision : 0 xml : keepWhitespace : false [ minify ] disableCSS = false disableHTML = false disableJS = false disableJSON = false disableSVG = false disableXML = false minifyOutput = false [ minify . tdewolff ] [ minify . tdewolff . css ] keepCSS2 = true precision = 0 [ minify . tdewolff . html ] keepComments = false keepConditionalComments = false keepDefaultAttrVals = true keepDocumentTags = true keepEndTags = true keepQuotes = false keepSpecialComments = true keepWhitespace = false templateDelims = [ '' , '' ] [ minify . tdewolff . js ] keepVarNames = false precision = 0 version = 2022 [ minify . tdewolff . json ] keepNumbers = false precision = 0 [ minify . tdewolff . svg ] keepComments = false precision = 0 [ minify . tdewolff . xml ] keepWhitespace = false { \"minify\" : { \"disableCSS\" : false , \"disableHTML\" : false , \"disableJS\" : false , \"disableJSON\" : false , \"disableSVG\" : false , \"disableXML\" : false , \"minifyOutput\" : false , \"tdewolff\" : { \"css\" : { \"keepCSS2\" : true , \"precision\" : 0 }, \"html\" : { \"keepComments\" : false , \"keepConditionalComments\" : false , \"keepDefaultAttrVals\" : true , \"keepDocumentTags\" : true , \"keepEndTags\" : true , \"keepQuotes\" : false , \"keepSpecialComments\" : true , \"keepWhitespace\" : false , \"templateDelims\" : [ \"\" , \"\" ] }, \"js\" : { \"keepVarNames\" : false , \"precision\" : 0 , \"version\" : 2022 }, \"json\" : { \"keepNumbers\" : false , \"precision\" : 0 }, \"svg\" : { \"keepComments\" : false , \"precision\" : 0 }, \"xml\" : { \"keepWhitespace\" : false } } } } Configure file caches Since Hugo 0.52 you can configure more than just the cacheDir . This is the default configuration: hugo. yaml toml json caches : assets : dir : : resourceDir/_gen maxAge : - 1 getcsv : dir : : cacheDir/:project maxAge : - 1 getjson : dir : : cacheDir/:project maxAge : - 1 getresource : dir : : cacheDir/:project maxAge : - 1 images : dir : : resourceDir/_gen maxAge : - 1 modules : dir : : cacheDir/modules maxAge : - 1 [ caches ] [ caches . assets ] dir = ':resourceDir/_gen' maxAge = -1 [ caches . getcsv ] dir = ':cacheDir/:project' maxAge = -1 [ caches . getjson ] dir = ':cacheDir/:project' maxAge = -1 [ caches . getresource ] dir = ':cacheDir/:project' maxAge = -1 [ caches . images ] dir = ':resourceDir/_gen' maxAge = -1 [ caches . modules ] dir = ':cacheDir/modules' maxAge = -1 { \"caches\" : { \"assets\" : { \"dir\" : \":resourceDir/_gen\" , \"maxAge\" : -1 }, \"getcsv\" : { \"dir\" : \":cacheDir/:project\" , \"maxAge\" : -1 }, \"getjson\" : { \"dir\" : \":cacheDir/:project\" , \"maxAge\" : -1 }, \"getresource\" : { \"dir\" : \":cacheDir/:project\" , \"maxAge\" : -1 }, \"images\" : { \"dir\" : \":resourceDir/_gen\" , \"maxAge\" : -1 }, \"modules\" : { \"dir\" : \":cacheDir/modules\" , \"maxAge\" : -1 } } } You can override any of these cache settings in your own hugo.toml . The keywords explained cacheDir ( string ) See Configure cacheDir . project ( string ) The base directory name of the current Hugo project. This means that, in its default setting, every project will have separated file caches, which means that when you do hugo --gc you will not touch files related to other Hugo projects running on the same PC. resourceDir ( string ) This is the value of the resourceDir configuration option. maxAge ( string ) This is the duration before a cache entry will be evicted, -1 means forever and 0 effectively turns that particular cache off. Uses Go\u2019s time.Duration , so valid values are \"10s\" (10 seconds), \"10m\" (10 minutes) and \"10h\" (10 hours). dir ( string ) The absolute path to where the files for this cache will be stored. Allowed starting placeholders are :cacheDir and :resourceDir (see above). Configure cacheDir This is the directory where Hugo by default will store its file caches. See Configure File Caches . This can be set using the cacheDir config option or via the OS environment variable HUGO_CACHEDIR . If this is not set, Hugo will use, in order of preference: If running on Netlify: /opt/build/cache/hugo_cache/ . This means that if you run your builds on Netlify, all caches configured with :cacheDir will be saved and restored on the next build. For other CI vendors, please read their documentation. For an CircleCI example, see this configuration . In a hugo_cache directory below the OS user cache directory as defined by Go\u2019s os.UserCacheDir . On Unix systems, this is $XDG_CACHE_HOME as specified by basedir-spec-latest if non-empty, else $HOME/.cache . On MacOS, this is $HOME/Library/Caches . On Windows, this is %LocalAppData% . On Plan 9, this is $home/lib/cache . New in v0.116.0 In a hugo_cache_$USER directory below the OS temp dir. If you want to know the current value of cacheDir , you can run hugo config , e.g: hugo config | grep cachedir . Configure segments New in v0.124.0 The segments configuration is currently only used to configure partitioned rendering.\nThis feature is only about what gets rendered when, Hugo\u2019s entire object graph (sites and pages) is\nalways available. Each segment consists of zero or more exclude filters and zero or more include filters. Each filter consists of one or more field Glob matchers. Each filter in a section ( exclude or include ) is ORed together, each matcher in a filter is ANDed together. The fields that can be used in the filters are: path The logical page path . lang The page language . kind The kind of the page. output The output format of the page. It is recommended to put coarse grained filters (e.g. for language and output format) in the excludes section, e.g.: hugo. yaml toml json segments : segment1 : excludes : - lang : n * - lang : en output : rss includes : - kind : '{home,term,taxonomy}' - path : '{/docs,/docs/**}' [ segments ] [ segments . segment1 ] [[ segments . segment1 . excludes ]] lang = 'n*' [[ segments . segment1 . excludes ]] lang = 'en' output = 'rss' [[ segments . segment1 . includes ]] kind = '{home,term,taxonomy}' [[ segments . segment1 . includes ]] path = '{/docs,/docs/**}' { \"segments\" : { \"segment1\" : { \"excludes\" : [ { \"lang\" : \"n*\" }, { \"lang\" : \"en\" , \"output\" : \"rss\" } ], \"includes\" : [ { \"kind\" : \"{home,term,taxonomy}\" }, { \"path\" : \"{/docs,/docs/**}\" } ] } } } With the above you can render only the pages in segment1 by configuring the renderSegments or setting the --renderSegments flag: hugo --renderSegments segment1 Multiple segments can be configured, and the --renderSegments flag can take a comma separated list of segments. Some use cases for this feature: Splitting builds of big sites. Enable faster builds during development by only rendering a subset of the site. Partial rebuilds, e.g. render the home page and the \u201cnews section\u201d every hour, render the entire site once a week. Render only e.g. the JSON output format to push to e.g. a search index. See also Front matter Glossary of terms Data templates Alphabetical AlternativeOutputFormats On this page Configuration file Configuration directory Merge configuration from themes All configuration settings Configure build Configure cache busters Configure server 404 server error page Configure title case Configuration environment variables Configure with environment variables Ignore content and data files when rendering Configure front matter Configure minify Configure file caches Configure cacheDir Configure segments Last updated: March 28, 2024: Fix configuration file tree example (5ebfdea40) Improve this page By the Hugo Authors File an Issue Get Help @GoHugoIO @spf13 @bepsays Hugo Sponsors The Hugo logos are copyright \u00a9 Steve Francia 2013\u20132024. The Hugo Gopher is based on an original work by Ren\u00e9e French. News Docs Themes Showcase Community GitHub About Installation Getting started Quick reference Content management Templates Functions Methods Render hooks Hugo Modules Hugo Pipes CLI Troubleshooting Developer tools Hosting and deployment Contribute Maintenance Menu Docs Menu",
    "https://gohugo.io/installation/windows/": "HUGO News Docs Themes Showcase Community GitHub Search gohugoio Star About In this section Introduction Features Privacy Security License Installation In this section macOS Linux Windows BSD Getting started In this section Quick start Basic usage Directory structure Configuration Configure markup Glossary of terms External learning resources Quick reference In this section Emojis Functions Methods Page collections Content management In this section Organization Page bundles Content formats Front matter Build options Page resources Image processing Shortcodes Related content Sections Content types Archetypes Taxonomies Summaries Links and cross references URL management Menus Static files Table of contents Comments Multilingual Markdown attributes Syntax highlighting Diagrams Mathematics Templates In this section Introduction Template lookup order Base templates and blocks Single page templates List templates Homepage template Section templates Taxonomy templates Pagination Content view templates Partial templates Shortcode templates Menu templates Data templates RSS templates Sitemap templates Embedded templates Custom output formats 404 page Robots.txt Functions In this section cast collections compare crypto data debug diagrams encoding fmt global go template hugo images inflect js lang math openapi3 os partials path reflect resources safe strings templates time transform urls Methods In this section Duration Menu Menu entry Page Pages Resource Shortcode Site Taxonomy Time Render hooks In this section Introduction Code blocks Headings Images Links Hugo Modules In this section Configure Hugo modules Use Hugo Modules Theme components Hugo Pipes In this section Introduction Transpile Sass to CSS PostCSS PostProcess JavaScript building Babel Asset minification Concatenating assets Fingerprinting and SRI hashing Resource from string Resource from template CLI Troubleshooting In this section Audit Logging Inspection Deprecation Performance FAQs Developer tools In this section Editor plugins Front-ends Search Migrations Other projects Hosting and deployment In this section Hugo Deploy Deploy with Rclone Deploy with Rsync Host on 21YunBox Host on AWS Amplify Host on Azure Static Web Apps Host on Cloudflare Pages Host on Firebase Host on GitHub Pages Host on GitLab Pages Host on KeyCDN Host on Netlify Host on Render Contribute In this section Development Documentation Themes Maintenance INSTALLATION Windows Install Hugo on Windows. Hugo v0.121.1 and later require at least Windows 10 or Windows Server 2016. Editions Hugo is available in two editions: standard and extended. With the extended edition you can: Encode to the WebP format when processing images . You can decode WebP images with either edition. Transpile Sass to CSS using the embedded LibSass transpiler. The extended edition is not required to use the Dart Sass transpiler. We recommend that you install the extended edition. Prerequisites Although not required in all cases, Git , Go , and Dart Sass are commonly used when working with Hugo. Git is required to: Build Hugo from source Use the Hugo Modules feature Install a theme as a Git submodule Access commit information from a local Git repository Host your site with services such as CloudCannon , Cloudflare Pages , GitHub Pages , GitLab Pages , and Netlify Go is required to: Build Hugo from source Use the Hugo Modules feature Dart Sass is required to transpile Sass to CSS when using the latest features of the Sass language. Please refer to the relevant documentation for installation instructions: Git Go Dart Sass Prebuilt binaries Prebuilt binaries are available for a variety of operating systems and architectures. Visit the latest release page, and scroll down to the Assets section. Download the archive for the desired edition, operating system, and architecture Extract the archive Move the executable to the desired directory Add this directory to the PATH environment variable Verify that you have execute permission on the file Please consult your operating system documentation if you need help setting file permissions or modifying your PATH environment variable. If you do not see a prebuilt binary for the desired edition, operating system, and architecture, install Hugo using one of the methods described below. Package managers Chocolatey Chocolatey is a free and open-source package manager for Windows. To install the extended edition of Hugo: choco install hugo-extended Scoop Scoop is a free and open-source package manager for Windows. To install the extended edition of Hugo: scoop install hugo-extended Winget Winget is Microsoft\u2019s official free and open-source package manager for Windows. To install the extended edition of Hugo: winget install Hugo.Hugo.Extended Build from source To build the extended edition of Hugo from source you must: Install Git Install Go version 1.20 or later Install a C compiler, either GCC or Clang Update your PATH environment variable as described in the Go documentation The install directory is controlled by the GOPATH and GOBIN environment variables. If GOBIN is set, binaries are installed to that directory. If GOPATH is set, binaries are installed to the bin subdirectory of the first directory in the GOPATH list. Otherwise, binaries are installed to the bin subdirectory of the default GOPATH ( $HOME/go or %USERPROFILE%\\go ). Then build and test: CGO_ENABLED = 1 go install -tags extended github.com/gohugoio/hugo@latest hugo version See these detailed instructions to install GCC on Windows. Comparison Prebuilt binaries Package managers Build from source Easy to install? \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f Easy to upgrade? \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f Easy to downgrade? \u2714\ufe0f \u2714\ufe0f 1 \u2714\ufe0f Automatic updates? \u274c \u274c 2 \u274c Latest version available? \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f Easy if a previous version is still installed. \u21a9\ufe0e Possible but requires advanced configuration. \u21a9\ufe0e See also Linux macOS BSD Development GitInfo On this page Editions Prerequisites Prebuilt binaries Package managers Build from source Comparison Last updated: January 26, 2024: Squashed 'docs/' changes from 4dd2d6415..3b1a8579d (7125ad401) Improve this page By the Hugo Authors File an Issue Get Help @GoHugoIO @spf13 @bepsays Hugo Sponsors The Hugo logos are copyright \u00a9 Steve Francia 2013\u20132024. The Hugo Gopher is based on an original work by Ren\u00e9e French. News Docs Themes Showcase Community GitHub About Installation Getting started Quick reference Content management Templates Functions Methods Render hooks Hugo Modules Hugo Pipes CLI Troubleshooting Developer tools Hosting and deployment Contribute Maintenance Menu Docs Menu",
    "https://gohugo.io/installation/bsd/": "HUGO News Docs Themes Showcase Community GitHub Search gohugoio Star About In this section Introduction Features Privacy Security License Installation In this section macOS Linux Windows BSD Getting started In this section Quick start Basic usage Directory structure Configuration Configure markup Glossary of terms External learning resources Quick reference In this section Emojis Functions Methods Page collections Content management In this section Organization Page bundles Content formats Front matter Build options Page resources Image processing Shortcodes Related content Sections Content types Archetypes Taxonomies Summaries Links and cross references URL management Menus Static files Table of contents Comments Multilingual Markdown attributes Syntax highlighting Diagrams Mathematics Templates In this section Introduction Template lookup order Base templates and blocks Single page templates List templates Homepage template Section templates Taxonomy templates Pagination Content view templates Partial templates Shortcode templates Menu templates Data templates RSS templates Sitemap templates Embedded templates Custom output formats 404 page Robots.txt Functions In this section cast collections compare crypto data debug diagrams encoding fmt global go template hugo images inflect js lang math openapi3 os partials path reflect resources safe strings templates time transform urls Methods In this section Duration Menu Menu entry Page Pages Resource Shortcode Site Taxonomy Time Render hooks In this section Introduction Code blocks Headings Images Links Hugo Modules In this section Configure Hugo modules Use Hugo Modules Theme components Hugo Pipes In this section Introduction Transpile Sass to CSS PostCSS PostProcess JavaScript building Babel Asset minification Concatenating assets Fingerprinting and SRI hashing Resource from string Resource from template CLI Troubleshooting In this section Audit Logging Inspection Deprecation Performance FAQs Developer tools In this section Editor plugins Front-ends Search Migrations Other projects Hosting and deployment In this section Hugo Deploy Deploy with Rclone Deploy with Rsync Host on 21YunBox Host on AWS Amplify Host on Azure Static Web Apps Host on Cloudflare Pages Host on Firebase Host on GitHub Pages Host on GitLab Pages Host on KeyCDN Host on Netlify Host on Render Contribute In this section Development Documentation Themes Maintenance INSTALLATION BSD Install Hugo on BSD derivatives. Editions Hugo is available in two editions: standard and extended. With the extended edition you can: Encode to the WebP format when processing images . You can decode WebP images with either edition. Transpile Sass to CSS using the embedded LibSass transpiler. The extended edition is not required to use the Dart Sass transpiler. We recommend that you install the extended edition. Prerequisites Although not required in all cases, Git , Go , and Dart Sass are commonly used when working with Hugo. Git is required to: Build Hugo from source Use the Hugo Modules feature Install a theme as a Git submodule Access commit information from a local Git repository Host your site with services such as CloudCannon , Cloudflare Pages , GitHub Pages , GitLab Pages , and Netlify Go is required to: Build Hugo from source Use the Hugo Modules feature Dart Sass is required to transpile Sass to CSS when using the latest features of the Sass language. Please refer to the relevant documentation for installation instructions: Git Go Dart Sass Prebuilt binaries Prebuilt binaries are available for a variety of operating systems and architectures. Visit the latest release page, and scroll down to the Assets section. Download the archive for the desired edition, operating system, and architecture Extract the archive Move the executable to the desired directory Add this directory to the PATH environment variable Verify that you have execute permission on the file Please consult your operating system documentation if you need help setting file permissions or modifying your PATH environment variable. If you do not see a prebuilt binary for the desired edition, operating system, and architecture, install Hugo using one of the methods described below. Repository packages Most BSD derivatives maintain a repository for commonly installed applications. Please note that these repositories may not contain the latest release . DragonFly BSD DragonFly BSD includes Hugo in its package repository. To install the extended edition of Hugo: sudo pkg install gohugo FreeBSD FreeBSD includes Hugo in its package repository. To install the extended edition of Hugo: sudo pkg install gohugo NetBSD NetBSD includes Hugo in its package repository. To install the extended edition of Hugo: sudo pkgin install go-hugo OpenBSD OpenBSD includes Hugo in its package repository. This will prompt you to select which edition of Hugo to install: doas pkg_add hugo Build from source To build the extended edition of Hugo from source you must: Install Git Install Go version 1.20 or later Install a C compiler, either GCC or Clang Update your PATH environment variable as described in the Go documentation The install directory is controlled by the GOPATH and GOBIN environment variables. If GOBIN is set, binaries are installed to that directory. If GOPATH is set, binaries are installed to the bin subdirectory of the first directory in the GOPATH list. Otherwise, binaries are installed to the bin subdirectory of the default GOPATH ( $HOME/go or %USERPROFILE%\\go ). Then build and test: CGO_ENABLED = 1 go install -tags extended github.com/gohugoio/hugo@latest hugo version Comparison Prebuilt binaries Repository packages Build from source Easy to install? \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f Easy to upgrade? \u2714\ufe0f varies \u2714\ufe0f Easy to downgrade? \u2714\ufe0f varies \u2714\ufe0f Automatic updates? \u274c varies \u274c Latest version available? \u2714\ufe0f varies \u2714\ufe0f See also Linux Windows macOS Development GitInfo On this page Editions Prerequisites Prebuilt binaries Repository packages Build from source Comparison Last updated: January 26, 2024: Squashed 'docs/' changes from 4dd2d6415..3b1a8579d (7125ad401) Improve this page By the Hugo Authors File an Issue Get Help @GoHugoIO @spf13 @bepsays Hugo Sponsors The Hugo logos are copyright \u00a9 Steve Francia 2013\u20132024. The Hugo Gopher is based on an original work by Ren\u00e9e French. News Docs Themes Showcase Community GitHub About Installation Getting started Quick reference Content management Templates Functions Methods Render hooks Hugo Modules Hugo Pipes CLI Troubleshooting Developer tools Hosting and deployment Contribute Maintenance Menu Docs Menu",
    "https://gohugo.io/getting-started/configuration-markup/": "HUGO News Docs Themes Showcase Community GitHub Search gohugoio Star About In this section Introduction Features Privacy Security License Installation In this section macOS Linux Windows BSD Getting started In this section Quick start Basic usage Directory structure Configuration Configure markup Glossary of terms External learning resources Quick reference In this section Emojis Functions Methods Page collections Content management In this section Organization Page bundles Content formats Front matter Build options Page resources Image processing Shortcodes Related content Sections Content types Archetypes Taxonomies Summaries Links and cross references URL management Menus Static files Table of contents Comments Multilingual Markdown attributes Syntax highlighting Diagrams Mathematics Templates In this section Introduction Template lookup order Base templates and blocks Single page templates List templates Homepage template Section templates Taxonomy templates Pagination Content view templates Partial templates Shortcode templates Menu templates Data templates RSS templates Sitemap templates Embedded templates Custom output formats 404 page Robots.txt Functions In this section cast collections compare crypto data debug diagrams encoding fmt global go template hugo images inflect js lang math openapi3 os partials path reflect resources safe strings templates time transform urls Methods In this section Duration Menu Menu entry Page Pages Resource Shortcode Site Taxonomy Time Render hooks In this section Introduction Code blocks Headings Images Links Hugo Modules In this section Configure Hugo modules Use Hugo Modules Theme components Hugo Pipes In this section Introduction Transpile Sass to CSS PostCSS PostProcess JavaScript building Babel Asset minification Concatenating assets Fingerprinting and SRI hashing Resource from string Resource from template CLI Troubleshooting In this section Audit Logging Inspection Deprecation Performance FAQs Developer tools In this section Editor plugins Front-ends Search Migrations Other projects Hosting and deployment In this section Hugo Deploy Deploy with Rclone Deploy with Rsync Host on 21YunBox Host on AWS Amplify Host on Azure Static Web Apps Host on Cloudflare Pages Host on Firebase Host on GitHub Pages Host on GitLab Pages Host on KeyCDN Host on Netlify Host on Render Contribute In this section Development Documentation Themes Maintenance GETTING STARTED FUNDAMENTALS Configure markup Configure rendering of markup to HTML. Default handler Hugo uses Goldmark to render Markdown to HTML. hugo. yaml toml json markup : defaultMarkdownHandler : goldmark [ markup ] defaultMarkdownHandler = 'goldmark' { \"markup\" : { \"defaultMarkdownHandler\" : \"goldmark\" } } Files with the .md or .markdown extension are processed as Markdown, provided that you have not specified a different content format using the markup field in front matter. To use a different renderer for Markdown files, specify one of asciidocext , org , pandoc , or rst in your site configuration. defaultMarkdownHandler Description asciidocext AsciiDoc goldmark Goldmark org Emacs Org Mode pandoc Pandoc rst reStructuredText To use AsciiDoc, Pandoc, or reStructuredText you must install the relevant renderer and update your security policy . Unless you need a unique capability provided by one of the alternate Markdown handlers, we strongly recommend that you use the default setting. Goldmark is fast, well maintained, conforms to the CommonMark specification, and is compatible with GitHub Flavored Markdown (GFM). Goldmark This is the default configuration for the Goldmark Markdown renderer: hugo. yaml toml json markup : goldmark : duplicateResourceFiles : false extensions : cjk : eastAsianLineBreaks : false eastAsianLineBreaksStyle : simple enable : false escapedSpace : false definitionList : true footnote : true linkify : true linkifyProtocol : https passthrough : delimiters : block : [] inline : [] enable : false strikethrough : true table : true taskList : true typographer : apostrophe : '\u2019' disable : false ellipsis : '\u2026' emDash : '\u2014' enDash : '\u2013' leftAngleQuote : '\u00ab' leftDoubleQuote : '\u201c' leftSingleQuote : '\u2018' rightAngleQuote : '\u00bb' rightDoubleQuote : '\u201d' rightSingleQuote : '\u2019' parser : attribute : block : false title : true autoHeadingID : true autoHeadingIDType : github wrapStandAloneImageWithinParagraph : true renderHooks : image : enableDefault : false link : enableDefault : false renderer : hardWraps : false unsafe : false xhtml : false [ markup ] [ markup . goldmark ] duplicateResourceFiles = false [ markup . goldmark . extensions ] definitionList = true footnote = true linkify = true linkifyProtocol = 'https' strikethrough = true table = true taskList = true [ markup . goldmark . extensions . cjk ] eastAsianLineBreaks = false eastAsianLineBreaksStyle = 'simple' enable = false escapedSpace = false [ markup . goldmark . extensions . passthrough ] enable = false [ markup . goldmark . extensions . passthrough . delimiters ] block = [] inline = [] [ markup . goldmark . extensions . typographer ] apostrophe = '\u2019' disable = false ellipsis = '\u2026' emDash = '\u2014' enDash = '\u2013' leftAngleQuote = '\u00ab' leftDoubleQuote = '\u201c' leftSingleQuote = '\u2018' rightAngleQuote = '\u00bb' rightDoubleQuote = '\u201d' rightSingleQuote = '\u2019' [ markup . goldmark . parser ] autoHeadingID = true autoHeadingIDType = 'github' wrapStandAloneImageWithinParagraph = true [ markup . goldmark . parser . attribute ] block = false title = true [ markup . goldmark . renderHooks ] [ markup . goldmark . renderHooks . image ] enableDefault = false [ markup . goldmark . renderHooks . link ] enableDefault = false [ markup . goldmark . renderer ] hardWraps = false unsafe = false xhtml = false { \"markup\" : { \"goldmark\" : { \"duplicateResourceFiles\" : false , \"extensions\" : { \"cjk\" : { \"eastAsianLineBreaks\" : false , \"eastAsianLineBreaksStyle\" : \"simple\" , \"enable\" : false , \"escapedSpace\" : false }, \"definitionList\" : true , \"footnote\" : true , \"linkify\" : true , \"linkifyProtocol\" : \"https\" , \"passthrough\" : { \"delimiters\" : { \"block\" : [], \"inline\" : [] }, \"enable\" : false }, \"strikethrough\" : true , \"table\" : true , \"taskList\" : true , \"typographer\" : { \"apostrophe\" : \"\\u0026rsquo;\" , \"disable\" : false , \"ellipsis\" : \"\\u0026hellip;\" , \"emDash\" : \"\\u0026mdash;\" , \"enDash\" : \"\\u0026ndash;\" , \"leftAngleQuote\" : \"\\u0026laquo;\" , \"leftDoubleQuote\" : \"\\u0026ldquo;\" , \"leftSingleQuote\" : \"\\u0026lsquo;\" , \"rightAngleQuote\" : \"\\u0026raquo;\" , \"rightDoubleQuote\" : \"\\u0026rdquo;\" , \"rightSingleQuote\" : \"\\u0026rsquo;\" } }, \"parser\" : { \"attribute\" : { \"block\" : false , \"title\" : true }, \"autoHeadingID\" : true , \"autoHeadingIDType\" : \"github\" , \"wrapStandAloneImageWithinParagraph\" : true }, \"renderHooks\" : { \"image\" : { \"enableDefault\" : false }, \"link\" : { \"enableDefault\" : false } }, \"renderer\" : { \"hardWraps\" : false , \"unsafe\" : false , \"xhtml\" : false } } } } Goldmark extensions The extensions below, excluding passthrough, are enabled by default. Enable the passthrough extension if you include mathematical equations and expressions in your Markdown using LaTeX or TeX typesetting syntax. See mathematics in Markdown for details. Extension Documentation cjk Goldmark Extensions: CJK definitionList PHP Markdown Extra: Definition lists footnote PHP Markdown Extra: Footnotes linkify GitHub Flavored Markdown: Autolinks passthrough Hugo Goldmark Extensions: Passthrough strikethrough GitHub Flavored Markdown: Strikethrough table GitHub Flavored Markdown: Tables taskList GitHub Flavored Markdown: Task list items typographer Goldmark Extensions: Typographer The typographer extension replaces certain character combinations with HTML entities as specified below: Markdown Replaced by Description ... \u2026 horizontal ellipsis ' \u2019 apostrophe -- \u2013 en dash --- \u2014 em dash \u00ab \u00ab left angle quote \u201c \u201c left double quote \u2018 \u2018 left single quote \u00bb \u00bb right angle quote \u201d \u201d right double quote \u2019 \u2019 right single quote Goldmark settings explained Most of the Goldmark settings above are self-explanatory, but some require explanation. duplicateResourceFiles New in v0.123.0 ( bool ) If true , shared page resources on multilingual single-host sites will be duplicated for each language. See multilingual page resources for details. Default is false . With multilingual single-host sites, setting this parameter to false will enable Hugo\u2019s embedded link render hook and embedded image render hook . This is the default configuration for multilingual single-host sites. parser.wrapStandAloneImageWithinParagraph ( bool ) If true , image elements without adjacent content will be wrapped within a p element when rendered. This is the default Markdown behavior. Set to false when using an image render hook to render standalone images as figure elements. Default is true . parser.autoHeadingIDType ( string ) The strategy used to automatically generate heading id attributes, one of github , github-ascii or blackfriday . github produces GitHub-compatible id attributes github-ascii drops any non-ASCII characters after accent normalization blackfriday produces id attributes compatible with the Blackfriday Markdown renderer This is also the strategy used by the anchorize template function. Default is github . parser.attribute.block ( bool ) If true , enables Markdown attributes for block elements. Default is false . parser.attribute.title ( bool ) If true , enables Markdown attributes for headings. Default is true . renderHooks.image.enableDefault New in v0.123.0 ( bool ) If true , enables Hugo\u2019s embedded image render hook . Default is false . The embedded image render hook is automatically enabled for multilingual single-host sites if duplication of shared page resources is disabled. This is the default configuration for multilingual single-host sites. renderHooks.link.enableDefault New in v0.123.0 ( bool ) If true , enables Hugo\u2019s embedded link render hook . Default is false . The embedded link render hook is automatically enabled for multilingual single-host sites if duplication of shared page resources is disabled. This is the default configuration for multilingual single-host sites. renderer.hardWraps ( bool ) If true , Goldmark replaces newline characters within a paragraph with br elements. Default is false . renderer.unsafe ( bool ) If true , Goldmark renders raw HTML mixed within the Markdown. This is unsafe unless the content is under your control. Default is false . AsciiDoc This is the default configuration for the AsciiDoc renderer: hugo. yaml toml json markup : asciidocExt : attributes : {} backend : html5 extensions : [] failureLevel : fatal noHeaderOrFooter : true preserveTOC : false safeMode : unsafe sectionNumbers : false trace : false verbose : false workingFolderCurrent : false [ markup ] [ markup . asciidocExt ] backend = 'html5' extensions = [] failureLevel = 'fatal' noHeaderOrFooter = true preserveTOC = false safeMode = 'unsafe' sectionNumbers = false trace = false verbose = false workingFolderCurrent = false [ markup . asciidocExt . attributes ] { \"markup\" : { \"asciidocExt\" : { \"attributes\" : {}, \"backend\" : \"html5\" , \"extensions\" : [], \"failureLevel\" : \"fatal\" , \"noHeaderOrFooter\" : true , \"preserveTOC\" : false , \"safeMode\" : \"unsafe\" , \"sectionNumbers\" : false , \"trace\" : false , \"verbose\" : false , \"workingFolderCurrent\" : false } } } AsciiDoc settings explained attributes ( map ) A map of key/value pairs, each a document attributes,See Asciidoctor\u2019s attributes . backend ( string ) The backend output file format. Default is html5 . extensions ( string array ) An array of enabled extensions, one or more of asciidoctor-html5s , asciidoctor-bibtex , asciidoctor-diagram , asciidoctor-interdoc-reftext , asciidoctor-katex , asciidoctor-latex , asciidoctor-mathematical , or asciidoctor-question . To mitigate security risks, entries in the extension array may not contain forward slashes ( / ), backslashes ( \\ ), or periods. Due to this restriction, extensions must be in Ruby\u2019s $LOAD_PATH . failureLevel ( string ) The minimum logging level that triggers a non-zero exit code (failure). Default is fatal . noHeaderOrFooter ( bool ) If true , outputs an embeddable document, which excludes the header, the footer, and everything outside the body of the document. Default is true . preserveTOC ( bool ) If true , preserves the table of contents (TOC) rendered by Asciidoctor. By default, to make the TOC compatible with existing themes, Hugo removes the TOC rendered by Asciidoctor. To render the TOC, use the TableOfContents method on a Page object in your templates. Default is false . safeMode ( string ) The safe mode level, one of unsafe , safe , server , or secure . Default is unsafe . sectionNumbers ( bool ) If true , numbers each section title. Default is false . trace ( bool ) If true , include backtrace information on errors. Default is false . verbose ( bool )If true , verbosely prints processing information and configuration file checks to stderr. Default is false . workingFolderCurrent ( bool ) If true , sets the working directory to be the same as that of the AsciiDoc file being processed, allowing includes to work with relative paths. Set to true to render diagrams with the asciidoctor-diagram extension. Default is false . AsciiDoc configuration example hugo. yaml toml json markup : asciidocExt : attributes : my-attribute-name : my value my-base-url : https://example.com/ extensions : - asciidoctor-html5s - asciidoctor-diagram workingFolderCurrent : true [ markup ] [ markup . asciidocExt ] extensions = [ 'asciidoctor-html5s' , 'asciidoctor-diagram' ] workingFolderCurrent = true [ markup . asciidocExt . attributes ] my-attribute-name = 'my value' my-base-url = 'https://example.com/' { \"markup\" : { \"asciidocExt\" : { \"attributes\" : { \"my-attribute-name\" : \"my value\" , \"my-base-url\" : \"https://example.com/\" }, \"extensions\" : [ \"asciidoctor-html5s\" , \"asciidoctor-diagram\" ], \"workingFolderCurrent\" : true } } } AsciiDoc troubleshooting Run hugo --logLevel debug to examine Hugo\u2019s call to the Asciidoctor executable: INFO 2019/12/22 09:08:48 Rendering book-as-pdf.adoc with C:\\Ruby26-x64\\bin\\asciidoctor.bat using asciidoc args [--no-header-footer -r asciidoctor-html5s -b html5s -r asciidoctor-diagram --base-dir D:\\prototypes\\hugo_asciidoc_ddd\\docs -a outdir=D:\\prototypes\\hugo_asciidoc_ddd\\build -] ... Highlight This is the default highlight configuration. Note that some of these settings can be set per code block, see Syntax Highlighting . hugo. yaml toml json markup : highlight : anchorLineNos : false codeFences : true guessSyntax : false hl_Lines : \"\" hl_inline : false lineAnchors : \"\" lineNoStart : 1 lineNos : false lineNumbersInTable : true noClasses : true noHl : false style : monokai tabWidth : 4 [ markup ] [ markup . highlight ] anchorLineNos = false codeFences = true guessSyntax = false hl_Lines = '' hl_inline = false lineAnchors = '' lineNoStart = 1 lineNos = false lineNumbersInTable = true noClasses = true noHl = false style = 'monokai' tabWidth = 4 { \"markup\" : { \"highlight\" : { \"anchorLineNos\" : false , \"codeFences\" : true , \"guessSyntax\" : false , \"hl_Lines\" : \"\" , \"hl_inline\" : false , \"lineAnchors\" : \"\" , \"lineNoStart\" : 1 , \"lineNos\" : false , \"lineNumbersInTable\" : true , \"noClasses\" : true , \"noHl\" : false , \"style\" : \"monokai\" , \"tabWidth\" : 4 } } } For style , see these galleries: Short snippets Long snippets For CSS, see Generate Syntax Highlighter CSS . Table of contents This is the default configuration for the table of contents, applicable to Goldmark and Asciidoctor: hugo. yaml toml json markup : tableOfContents : endLevel : 3 ordered : false startLevel : 2 [ markup ] [ markup . tableOfContents ] endLevel = 3 ordered = false startLevel = 2 { \"markup\" : { \"tableOfContents\" : { \"endLevel\" : 3 , \"ordered\" : false , \"startLevel\" : 2 } } } startLevel ( int ) Heading levels less than this value will be excluded from the table of contents. For example, to exclude h1 elements from the table of contents, set this value to 2 . Default is 2 . endLevel ( int ) Heading levels greater than this value will be excluded from the table of contents. For example, to exclude h4 , h5 , and h6 elements from the table of contents, set this value to 3 . Default is 3 . ordered ( bool ) If true , generates an ordered list instead of an unordered list. Default is false . See also Content formats Markdown attributes Shortcodes Code block render hooks Heading render hooks On this page Default handler Goldmark AsciiDoc Highlight Table of contents Last updated: March 26, 2024: Update configuration-markup.md (194139ce7) Improve this page By the Hugo Authors File an Issue Get Help @GoHugoIO @spf13 @bepsays Hugo Sponsors The Hugo logos are copyright \u00a9 Steve Francia 2013\u20132024. The Hugo Gopher is based on an original work by Ren\u00e9e French. News Docs Themes Showcase Community GitHub About Installation Getting started Quick reference Content management Templates Functions Methods Render hooks Hugo Modules Hugo Pipes CLI Troubleshooting Developer tools Hosting and deployment Contribute Maintenance Menu Docs Menu",
    "https://gohugo.io/getting-started/glossary/": "HUGO News Docs Themes Showcase Community GitHub Search gohugoio Star About In this section Introduction Features Privacy Security License Installation In this section macOS Linux Windows BSD Getting started In this section Quick start Basic usage Directory structure Configuration Configure markup Glossary of terms External learning resources Quick reference In this section Emojis Functions Methods Page collections Content management In this section Organization Page bundles Content formats Front matter Build options Page resources Image processing Shortcodes Related content Sections Content types Archetypes Taxonomies Summaries Links and cross references URL management Menus Static files Table of contents Comments Multilingual Markdown attributes Syntax highlighting Diagrams Mathematics Templates In this section Introduction Template lookup order Base templates and blocks Single page templates List templates Homepage template Section templates Taxonomy templates Pagination Content view templates Partial templates Shortcode templates Menu templates Data templates RSS templates Sitemap templates Embedded templates Custom output formats 404 page Robots.txt Functions In this section cast collections compare crypto data debug diagrams encoding fmt global go template hugo images inflect js lang math openapi3 os partials path reflect resources safe strings templates time transform urls Methods In this section Duration Menu Menu entry Page Pages Resource Shortcode Site Taxonomy Time Render hooks In this section Introduction Code blocks Headings Images Links Hugo Modules In this section Configure Hugo modules Use Hugo Modules Theme components Hugo Pipes In this section Introduction Transpile Sass to CSS PostCSS PostProcess JavaScript building Babel Asset minification Concatenating assets Fingerprinting and SRI hashing Resource from string Resource from template CLI Troubleshooting In this section Audit Logging Inspection Deprecation Performance FAQs Developer tools In this section Editor plugins Front-ends Search Migrations Other projects Hosting and deployment In this section Hugo Deploy Deploy with Rclone Deploy with Rsync Host on 21YunBox Host on AWS Amplify Host on Azure Static Web Apps Host on Cloudflare Pages Host on Firebase Host on GitHub Pages Host on GitLab Pages Host on KeyCDN Host on Netlify Host on Render Contribute In this section Development Documentation Themes Maintenance GETTING STARTED Glossary of terms Terms commonly used throughout the documentation. A B C D E F G H I K L M N O P R S T U V W action See template action . archetype A template for new content. See details . argument A scalar , array , slice , map , or object passed to a function , method , or shortcode . array A numbered sequence of elements. Unlike Go\u2019s slice data type, an array has a fixed length. Elements within an array can be scalars , slices, maps , pages, or other arrays. See the Go\u00a0documentation for details. bool See boolean . boolean A data type with two possible values, either true or false . branch bundle A directory that contains an _index.md file and zero or more resources . Analogous to a physical branch, a branch bundle may have descendants including leaf bundles and other branch bundles. Top level directories with or without _index.md files are also branch bundles. This includes the home page. See details . build To generate a static site that includes HTML files and assets such as images, CSS, and JavaScript. The build process includes rendering and resource transformations. bundle See page bundle . cache A software component that stores data so that future requests for the same data are faster. chain Within a template, to connect one or more identifiers with a dot. An identifier can represent a method, object, or field. For example, .Site.Params.author.name or .Date.UTC.Hour . CJK A collective term for the Chinese, Japanese, and Korean languages. See details . collection An array , slice , or map . content format A markup language for creating content. Typically Markdown, but may also be HTML, AsciiDoc, Org, Pandoc, or reStructuredText. See details . content type A classification of content inferred from the top-level directory name or the type set in front matter . Pages in the root of the content directory, including the home page, are of type \u201cpage\u201d. Accessed via .Page.Type in templates . See details . content view A template called with the .Page.Render method. See details . context Represented by a dot \u201c.\u201d within a template action , context is the current location in a data structure. For example, while iterating over a collection of pages, the context within each iteration is the page\u2019s data structure. The context received by each template depends on template type and/or how it was called. See details . default sort order The default sort order for page collections. Hugo sorts by weight , then by date (descending), then by link title, and then by file path. element A member of a slice or array. environment Typically one of development , staging , or production , each environment may exhibit different behavior depending on configuration and template logic. For example, in a production environment you might minify and fingerprint CSS, but that probably doesn\u2019t make sense in a development environment. When running the built-in development server with the hugo server command, the environment is set to development . When building your site with the hugo command, the environment is set to production . To override the environment value, use the --environment command line flag or the HUGO_ENVIRONMENT environment variable. To determine the current environment within a template, use the hugo.Environment function. field A predefined key/value pair in front matter such as date or title . See\u00a0also parameter . flag An option passed to a command-line program, beginning with one or two hyphens. See details . float See floating point . floating point A numeric data type with a fractional component. For example, 3.14159 . fragment The final segment of a URL, beginning with a hash ( # ) mark, that references an id attribute of an HTML element on the page. front matter Metadata at the beginning of each content page, separated from the content by format-specific delimiters. See details . function Used within a template action , a function takes one or more arguments and returns a value. Unlike methods , functions are not associated with an object . See details . global resource A file within the assets directory, or within any directory mounted to the assets directory. Capture one or more global resources using the resources.Get , resources.GetMatch , resources.Match , or resources.ByType functions. headless bundle An unpublished leaf or branch bundle whose content and resources you can include in other pages. See build options . identifier A string that represents a variable, method, object, or field. It must conform to Go\u2019s language specification , beginning with a letter or underscore, followed by zero or more letters, digits, or underscores. int See integer . integer A numeric data type without a fractional component. For example, 42 . internationalization Software design and development efforts that enable localization . See the W3C definition . Abbreviated i18n. interval An interval is a range of numbers between two endpoints: closed, open, or half-open. A closed interval, denoted by brackets, includes its endpoints. For example, [0,\u00a01]\u00a0is the interval where 0 <= x <= 1 . An open interval, denoted by parentheses, excludes its endpoints. For example, (0,\u00a01)\u00a0is the interval where 0 < x < 1 . A half-open interval includes only one of its endpoints. For example, (0,\u00a01]\u00a0is the left-open interval where 0 < x <= 1 , while [0,\u00a01)\u00a0is the right-open interval where 0 <= x < 1 . kind See page kind . layout See template . leaf bundle A directory that contains an index.md file and zero or more resources . Analogous to a physical leaf, a leaf bundle is at the end of a branch. It has no descendants. See details . list page Any page kind that receives a page collection in context . This includes the home page, section pages , taxonomy pages , and term pages . localization Adaptation of a site to meet language and regional requirements. This includes translations, language-specific media, date and currency formats, etc. See details and the W3C definition . Abbreviated l10n. logical path New in v0.123.0 A page or page resource identifier derived from the file path, excluding its extension and language identifier. This value is neither a file path nor a URL. Starting with a file path relative to the content directory, Hugo determines the logical path by stripping the file extension and language identifier, converting to lower case, then replacing spaces with hyphens. See examples . map An unordered group of elements, each indexed by a unique key. See the Go\u00a0documentation for details. Markdown attribute A list of attributes, containing one or more key/value pairs, separated by spaces or commas, and wrapped by braces. Apply Markdown attributes to images and block-level elements including blockquotes, fenced code blocks, headings, horizontal rules, lists, paragraphs, and tables. See details . marshal To transform a data structure into a serialized object. For example, transforming a map into a JSON string. See unmarshal . method Used within a template action and associated with an object , a method takes zero or more arguments and either returns a value or performs an action. For example, .IsHome is a method on the .Page object which returns true if the current page is the home page. See also function . module Like a theme , a module is a packaged combination of archetypes , assets, content, data, templates , translation tables, static files, or configuration settings. A module may serve as the basis for a new site, or to augment an existing site. See details . node A class of page kinds including home , section , taxonomy , and term . noop An abbreviated form of \u201cno operation\u201d, a noop is a statement that does nothing. object A data structure with or without associated methods . ordered taxonomy Created by invoking the Alphabetical or ByCount method on a taxonomy object , which is a map , an ordered taxonomy is a slice , where each element is an object that contains the term and a slice of its weighted pages . output format Hugo generates one or more files per page when building a site. For example, when rendering home, section , taxonomy , and term pages, Hugo generates an HTML file and an RSS file. Both HTML and RSS are built-in output formats . Create multiple output formats, and control generation based on page kind , or by enabling one or more output formats for one or more pages. See details . page bundle A directory that encapsulates both content and associated resources . There are two types of page bundles: leaf bundles and branch bundles . See details . page collection A slice of page objects. page kind A classification of pages, one of home , page , section , taxonomy , or term . See details . Note that there are also RSS , sitemap , robotsTXT , and 404 page kinds, but these are only available during the rendering of each of these respective page\u2019s kind and therefore not available in any of the Pages collections. page resource A file within a page bundle . Capture one or more page resources using any of the Resources methods on a Page object. pager Created during pagination , a pager contains a subset of a section list, and navigation links to other pagers. paginate To split a section list into two or more pagers See details . pagination The process of paginating a section list. parameter Typically, a user-defined key/value pair at the site or page level, but may also refer to a configuration setting or an argument . See\u00a0also field . partial A template called from any other template including shortcodes , render hooks , and other partials. A partial either renders something or returns something. A partial can also call itself, for example, to walk a data structure. permalink The absolute URL of a published resource or a rendered page, including scheme and host. pipe See pipeline . pipeline Within a template action , a pipeline is a possibly chained sequence of values, function calls, or method calls. Functions and methods in the pipeline may take multiple arguments . A pipeline may be chained by separating a sequence of commands with pipeline characters \u201c|\u201d. In a chained pipeline, the result of each command is passed as the last argument to the following command. The output of the final command in the pipeline is the value of the pipeline. See the Go\u00a0documentation for details. publish See build . regular page Content with the \u201cpage\u201d page kind . See also section page . relative permalink The host-relative URL of a published resource or a rendered page. render hook A template that overrides standard Markdown rendering. See details . remote resource A file on a remote server, accessible via HTTP or HTTPS with the resources.GetRemote function. resource Any file consumed by the build process to augment or generate content, structure, behavior, or presentation. For example: images, videos, content snippets, CSS, Sass, JavaScript, and data. Hugo supports three types of resources: global , page , and remote resource type The main type of a resource\u2019s media type . Content files such as Markdown, HTML, AsciiDoc, Pandoc, reStructuredText, and Emacs Org Mode have resource type page . Other resource types include image , video , etc. Retrieve the resource type using the ResourceType method on a Resource object. scalar A single value, one of string , integer , floating point , or boolean . scratch pad Conceptually, a map with methods to set, get, update, and delete values. Attach the data structure to a Page object using the Scratch or Store methods, or create a locally scoped scratch pad using the newScratch function. section A top-level content directory, or any content directory with an\u00a0_index.md file. A content directory with an\u00a0_index.md file is also known as a branch bundle . Section templates receive one or more page collections in context . See details . section page Content with the \u201csection\u201d page kind . Typically a listing of regular pages and/or section pages within the current section . See also regular page . shortcode A template called from within Markdown, taking zero or more arguments . See details . slice A numbered sequence of elements. Unlike Go\u2019s array data type, slices are dynamically sized. Elements within a slice can be scalars , arrays , maps , pages, or other slices. See the Go\u00a0documentation for details. string A sequence of bytes. For example, \"What is 6 times 7?\" . string literal (interpreted) Interpreted string literals are character sequences between double quotes, as in \u201cfoo\u201d. Within the quotes, any character may appear except a newline and an unescaped double quote. The text between the quotes forms the value of the literal, with backslash escapes interpreted. See details . string literal (raw) Raw string literals are character sequences between backticks, as in `bar`. Within the backticks, any character may appear except a backtick. Backslashes have no special meaning and the string may contain newlines. Carriage return characters (\u2019\\r\u2019) inside raw string literals are discarded from the raw string value. See details . taxonomic weight Defined in front matter and unique to each taxonomy, this weight determines the sort order of page collections contained within a taxonomy object . See details . taxonomy A group of related terms used to classify content. For example, a \u201ccolors\u201d taxonomy might include the terms \u201cred\u201d, \u201cgreen\u201d, and \u201cblue\u201d. See details . taxonomy object A map of terms and the weighted pages associated with each term. taxonomy page Content with the \u201ctaxonomy\u201d page kind . Typically a listing of terms within a given taxonomy . template A file with template actions , located within the layouts directory of a project, theme, or module. See details . template action A data evaluation or control structure within a template , delimited by \u201c{{\"\u00a0and\u00a0\u201d}}\". See the Go\u00a0documentation for details. term A member of a taxonomy , used to classify content. See details . term page Content with the \u201cterm\u201d page kind . Typically a listing of regular pages and section pages with a given term . theme A packaged combination of archetypes , assets, content, data, templates , translation tables, static files, or configuration settings. A theme may serve as the basis for a new site, or to augment an existing site. See also module . token An identifier within a format string, beginning with a colon and replaced with a value when rendered. For example, use tokens in format strings for both permalinks and dates . type See content type . unmarshal To transform a serialized object into a data structure. For example, transforming a JSON file into a map that you can access within a template. See marshal . variable A user-defined identifier prepended with a $ symbol, representing a value of any data type, initialized or assigned within a template action . For example, $foo and $bar are variables. walk To recursively traverse a nested data structure. For example, rendering a multilevel menu. weight Used to position an element within a collection sorted by weight. Assign weights using non-zero integers. Lighter items float to the top, while heavier items sink to the bottom. Unweighted or zero-weighted elements are placed at the end of the collection. Weights are typically assigned to pages, menu entries, languages, and output formats. weighted page Contained within a taxonomy object , a weighted page is a map with two elements: a Page object, and its taxonomic weight as defined in front matter. Access the elements using the Page and Weight keys. See also Configure Hugo Front matter Image processing Methods Name Last updated: March 31, 2024: Revise page bundle descriptions (34f099e1e) Improve this page By the Hugo Authors File an Issue Get Help @GoHugoIO @spf13 @bepsays Hugo Sponsors The Hugo logos are copyright \u00a9 Steve Francia 2013\u20132024. The Hugo Gopher is based on an original work by Ren\u00e9e French. News Docs Themes Showcase Community GitHub About Installation Getting started Quick reference Content management Templates Functions Methods Render hooks Hugo Modules Hugo Pipes CLI Troubleshooting Developer tools Hosting and deployment Contribute Maintenance Menu Docs Menu",
    "https://gohugo.io/getting-started/external-learning-resources/": "HUGO News Docs Themes Showcase Community GitHub Search gohugoio Star About In this section Introduction Features Privacy Security License Installation In this section macOS Linux Windows BSD Getting started In this section Quick start Basic usage Directory structure Configuration Configure markup Glossary of terms External learning resources Quick reference In this section Emojis Functions Methods Page collections Content management In this section Organization Page bundles Content formats Front matter Build options Page resources Image processing Shortcodes Related content Sections Content types Archetypes Taxonomies Summaries Links and cross references URL management Menus Static files Table of contents Comments Multilingual Markdown attributes Syntax highlighting Diagrams Mathematics Templates In this section Introduction Template lookup order Base templates and blocks Single page templates List templates Homepage template Section templates Taxonomy templates Pagination Content view templates Partial templates Shortcode templates Menu templates Data templates RSS templates Sitemap templates Embedded templates Custom output formats 404 page Robots.txt Functions In this section cast collections compare crypto data debug diagrams encoding fmt global go template hugo images inflect js lang math openapi3 os partials path reflect resources safe strings templates time transform urls Methods In this section Duration Menu Menu entry Page Pages Resource Shortcode Site Taxonomy Time Render hooks In this section Introduction Code blocks Headings Images Links Hugo Modules In this section Configure Hugo modules Use Hugo Modules Theme components Hugo Pipes In this section Introduction Transpile Sass to CSS PostCSS PostProcess JavaScript building Babel Asset minification Concatenating assets Fingerprinting and SRI hashing Resource from string Resource from template CLI Troubleshooting In this section Audit Logging Inspection Deprecation Performance FAQs Developer tools In this section Editor plugins Front-ends Search Migrations Other projects Hosting and deployment In this section Hugo Deploy Deploy with Rclone Deploy with Rsync Host on 21YunBox Host on AWS Amplify Host on Azure Static Web Apps Host on Cloudflare Pages Host on Firebase Host on GitHub Pages Host on GitLab Pages Host on KeyCDN Host on Netlify Host on Render Contribute In this section Development Documentation Themes Maintenance GETTING STARTED External learning resources A list of tutorials and books on Hugo. Books Hugo In Action Hugo in Action is a step-by-step guide to using Hugo to create static websites. Working with a complete example website and source code samples, you\u2019ll learn how to build and host a low-maintenance, high-performance site that will wow your users and stay stable without relying on a third-party server. Hugo In Action Home Page Build Websites with Hugo Build Websites with Hugo - Fast Web Development with Markdown (2020) by Brian P. Hogan. Beginner tutorials Hugo tutorial by CloudCannon Step-by-step written tutorial to teach you the basics of creating a Hugo site. Video tutorials Mike Dane explains the various features of Hugo via dedicated tutorials on YouTube . Introduction to building your first Hugo site by Mike Neumegen. See also Basic usage Quick start Last updated: December 4, 2023: Squashed 'docs/' changes from 4d936aee6..4dd2d6415 (35dec7c96) Improve this page By the Hugo Authors File an Issue Get Help @GoHugoIO @spf13 @bepsays Hugo Sponsors The Hugo logos are copyright \u00a9 Steve Francia 2013\u20132024. The Hugo Gopher is based on an original work by Ren\u00e9e French. News Docs Themes Showcase Community GitHub About Installation Getting started Quick reference Content management Templates Functions Methods Render hooks Hugo Modules Hugo Pipes CLI Troubleshooting Developer tools Hosting and deployment Contribute Maintenance Menu Docs Menu",
    "https://gohugo.io/categories/getting-started/": "HUGO News Docs Themes Showcase Community GitHub Search gohugoio Star About In this section Introduction Features Privacy Security License Installation In this section macOS Linux Windows BSD Getting started In this section Quick start Basic usage Directory structure Configuration Configure markup Glossary of terms External learning resources Quick reference In this section Emojis Functions Methods Page collections Content management In this section Organization Page bundles Content formats Front matter Build options Page resources Image processing Shortcodes Related content Sections Content types Archetypes Taxonomies Summaries Links and cross references URL management Menus Static files Table of contents Comments Multilingual Markdown attributes Syntax highlighting Diagrams Mathematics Templates In this section Introduction Template lookup order Base templates and blocks Single page templates List templates Homepage template Section templates Taxonomy templates Pagination Content view templates Partial templates Shortcode templates Menu templates Data templates RSS templates Sitemap templates Embedded templates Custom output formats 404 page Robots.txt Functions In this section cast collections compare crypto data debug diagrams encoding fmt global go template hugo images inflect js lang math openapi3 os partials path reflect resources safe strings templates time transform urls Methods In this section Duration Menu Menu entry Page Pages Resource Shortcode Site Taxonomy Time Render hooks In this section Introduction Code blocks Headings Images Links Hugo Modules In this section Configure Hugo modules Use Hugo Modules Theme components Hugo Pipes In this section Introduction Transpile Sass to CSS PostCSS PostProcess JavaScript building Babel Asset minification Concatenating assets Fingerprinting and SRI hashing Resource from string Resource from template CLI Troubleshooting In this section Audit Logging Inspection Deprecation Performance FAQs Developer tools In this section Editor plugins Front-ends Search Migrations Other projects Hosting and deployment In this section Hugo Deploy Deploy with Rclone Deploy with Rsync Host on 21YunBox Host on AWS Amplify Host on Azure Static Web Apps Host on Cloudflare Pages Host on Firebase Host on GitHub Pages Host on GitLab Pages Host on KeyCDN Host on Netlify Host on Render Contribute In this section Development Documentation Themes Maintenance Category: Getting Started Quick start Learn to create a Hugo site in minutes. Read More \u00bb Basic usage Hugo\u2019s command line interface (CLI) is fully featured but simple to use, even for those with limited experience working from the command line. Read More \u00bb Directory structure Each Hugo project is a directory, with subdirectories that contribute to the content, structure, behavior, and presentation of your site. Read More \u00bb Configure Hugo How to configure your Hugo site. Read More \u00bb Configure markup Configure rendering of markup to HTML. Read More \u00bb Glossary of terms Terms commonly used throughout the documentation. Read More \u00bb External learning resources A list of tutorials and books on Hugo. Read More \u00bb By the Hugo Authors File an Issue Get Help @GoHugoIO @spf13 @bepsays Hugo Sponsors The Hugo logos are copyright \u00a9 Steve Francia 2013\u20132024. The Hugo Gopher is based on an original work by Ren\u00e9e French. News Docs Themes Showcase Community GitHub About Installation Getting started Quick reference Content management Templates Functions Methods Render hooks Hugo Modules Hugo Pipes CLI Troubleshooting Developer tools Hosting and deployment Contribute Maintenance Menu Docs Menu",
    "https://gohugo.io/categories/installation/": "HUGO News Docs Themes Showcase Community GitHub Search gohugoio Star About In this section Introduction Features Privacy Security License Installation In this section macOS Linux Windows BSD Getting started In this section Quick start Basic usage Directory structure Configuration Configure markup Glossary of terms External learning resources Quick reference In this section Emojis Functions Methods Page collections Content management In this section Organization Page bundles Content formats Front matter Build options Page resources Image processing Shortcodes Related content Sections Content types Archetypes Taxonomies Summaries Links and cross references URL management Menus Static files Table of contents Comments Multilingual Markdown attributes Syntax highlighting Diagrams Mathematics Templates In this section Introduction Template lookup order Base templates and blocks Single page templates List templates Homepage template Section templates Taxonomy templates Pagination Content view templates Partial templates Shortcode templates Menu templates Data templates RSS templates Sitemap templates Embedded templates Custom output formats 404 page Robots.txt Functions In this section cast collections compare crypto data debug diagrams encoding fmt global go template hugo images inflect js lang math openapi3 os partials path reflect resources safe strings templates time transform urls Methods In this section Duration Menu Menu entry Page Pages Resource Shortcode Site Taxonomy Time Render hooks In this section Introduction Code blocks Headings Images Links Hugo Modules In this section Configure Hugo modules Use Hugo Modules Theme components Hugo Pipes In this section Introduction Transpile Sass to CSS PostCSS PostProcess JavaScript building Babel Asset minification Concatenating assets Fingerprinting and SRI hashing Resource from string Resource from template CLI Troubleshooting In this section Audit Logging Inspection Deprecation Performance FAQs Developer tools In this section Editor plugins Front-ends Search Migrations Other projects Hosting and deployment In this section Hugo Deploy Deploy with Rclone Deploy with Rsync Host on 21YunBox Host on AWS Amplify Host on Azure Static Web Apps Host on Cloudflare Pages Host on Firebase Host on GitHub Pages Host on GitLab Pages Host on KeyCDN Host on Netlify Host on Render Contribute In this section Development Documentation Themes Maintenance Category: Installation macOS Install Hugo on macOS. Read More \u00bb Linux Install Hugo on Linux. Read More \u00bb Windows Install Hugo on Windows. Read More \u00bb BSD Install Hugo on BSD derivatives. Read More \u00bb By the Hugo Authors File an Issue Get Help @GoHugoIO @spf13 @bepsays Hugo Sponsors The Hugo logos are copyright \u00a9 Steve Francia 2013\u20132024. The Hugo Gopher is based on an original work by Ren\u00e9e French. News Docs Themes Showcase Community GitHub About Installation Getting started Quick reference Content management Templates Functions Methods Render hooks Hugo Modules Hugo Pipes CLI Troubleshooting Developer tools Hosting and deployment Contribute Maintenance Menu Docs Menu"
}